module MoBL

imports
  Common
  External

exports

  context-free start-symbols
    Start

  context-free syntax %% Main
  
    ID                             -> QId
    QId "::" ID                    -> QId {cons("QId")}
    "module" QId Definition*       -> Start {cons("Module")}
    ID ":" Type                    -> FArg {cons("FArg")}
    QId                            -> Type {cons("SimpleType")}
    QId "<" {Type ","}* ">"        -> Type {cons("GenericType")}

  context-free syntax %% Entities
  
    "entity" QId "{" Property* "}" -> Definition {cons("Entity")}
    ID ":" Type                   -> Property {cons("Property")}
  
  context-free syntax %% UI
  
    "screen" QId "(" {FArg ","}* ")" "{" ScreenElem* "}" -> Definition {cons("ScreenNoReturn")}
    "screen" QId "(" {FArg ","}* ")" ":" Type "{" ScreenElem* "}" -> Definition {cons("Screen")}

    "template" QId "(" {FArg ","}* ")" "{" ScreenElem* "}" -> TemplateDefinition {cons("Template")}
    "template" QId "(" {FArg ","}* ")" "requires" {TemplateSig ","}* "{" ScreenElem* "}" -> TemplateDefinition {cons("Template")}
    
    ID "(" {FArg ","}* ")" -> TemplateSig {cons("TemplateSig")}
    
    TemplateDefinition      -> Definition
    
    "<" ID HtmlArg* ">" ScreenElem* "</" ID ">"   -> ScreenElem {cons("Html")}
    "<" ID HtmlArg* "/"">" -> ScreenElem {cons("HtmlShort")}
    ID "=" Exp             -> HtmlArg    {cons("HtmlArg")}
    
    TemplateDefinition                                                -> ScreenElem
    
    "init" "{" Statement* "}"                                         -> ScreenElem {cons("Init")}
    
    STRING                                                            -> ScreenElem {cons("ScreenString")}
    
    "list" "(" ID ":" Type "in" Exp ")" "{" ScreenElem* "}"           -> ScreenElem {cons("List")}
    "placeholder"  ID "{" ScreenElem* "}"                             -> ScreenElem {cons("PlaceHolder")}
    "cond" "(" Exp ")" "{" ScreenElem* "}"                            -> ScreenElem {cons("ConditionalDisplay")}
    
    "var" ID ":" Type ":=" Exp                                        -> ScreenElem {cons("ScreenVarDecl")}
    
    QId "(" {Exp ","}* ")" "[" PropertyArg* "]" "{" ScreenElem* "}"   -> ScreenElem {cons("TemplateCall")}
    %% Variants:
    QId "(" {Exp ","}* ")" "[" PropertyArg* "]"                       -> ScreenElem {cons("TemplateCallNoBody")}
    QId "(" {Exp ","}* ")" "{" ScreenElem* "}"                        -> ScreenElem {cons("TemplateCallNoProperties")}
    QId "(" {Exp ","}* ")"                                            -> ScreenElem {cons("TemplateCallNoPropertiesNoBody")}
    QId "[" PropertyArg* "]" "{" ScreenElem* "}"                      -> ScreenElem {cons("TemplateCallNoArgs")}
    QId "[" PropertyArg* "]"                                          -> ScreenElem {cons("TemplateCallNoArgsNoBody")}
    QId "{" ScreenElem* "}"                                           -> ScreenElem {cons("TemplateCallNoArgsNoProperties")}
    QId                                                               -> ScreenElem {cons("TemplateCallNoArgsNoPropertiesNoBody")}

    ID ":=" Exp  -> PropertyArg {cons("PropertyArg")}
  
  context-free syntax %% Logic
    "function" ID "(" FArg* ")" ":" Type "{" Statement* "}" -> Definition {cons("Function")}
    "function" ID "(" FArg* ")" "{" Statement* "}" -> Definition {cons("FunctionNoReturnType")}
    "function" "(" FArg* ")" ":" Type "{" Statement* "}" -> Exp {cons("FunctionExp")}
    "function" "(" FArg* ")" "{" Statement* "}" -> Exp {cons("FunctionNoReturnTypeExp")}
  
  context-free syntax %% Statements
    "var" ID ":" Type ":=" Exp ";"              -> Statement {cons("VarDecl")}
    "var" ID ":=" Exp ";"                        -> Statement {cons("VarDeclInferred")}
    
    QId ":=" Exp ";"                            -> Statement {cons("Assignment")}
    Exp ";"                                     -> Statement {cons("ExpStat")}
    "{" Statement* "}"                          -> Statement {cons("Block")}
    "if" "(" Exp ")" Statement "else" Statement -> Statement {cons("If")}
    "if" "(" Exp ")" Statement                  -> Statement {cons("IfNoElse")}
    
  context-free syntax %% Expressions
    STRING  -> Exp {cons("String")}
    INT     -> Exp {cons("Int")}
    QId     -> Exp {cons("Var")}
    QId "(" {Exp ","}* ")" -> Exp {cons("Call")}
    "uri" "(" Exp ")" -> Exp {cons("Uri")}
    Exp "[" Exp "]"  -> Exp {left, cons("Indexer")}
    
    Exp BoolMethodId Exp         -> Exp {cons("BinMethodCall"), left}
    Exp CompareMethodId Exp      -> Exp {cons("BinMethodCall"), left}
    Exp TermOperatorMethodId Exp -> Exp {cons("BinMethodCall"), left}
    Exp OperatorMethodId Exp     -> Exp {cons("BinMethodCall"), left}
    
    Exp "?" Exp ":" Exp          -> Exp {left, cons("Choice")}
    "[" {Exp ","}* "]"           -> Exp {cons("ListCons")}
    
    Exp Filter                               -> Exp {cons("SetComp")}
    "where" SetExp                              -> Filter {cons("FilterNoOrderByNoLimit")}
    "order" "by" OrderExp                    -> Filter {cons("FilterNoWhereNoLimit")}
    "where" SetExp "order" "by" OrderExp        -> Filter {cons("FilterNoLimit")}
    "where" SetExp Limit                        -> Filter {cons("FilterNoOrderBy")}
    "order" "by" OrderExp Limit              -> Filter {cons("FilterNoWhere")}
    Limit                                    -> Filter {cons("FilterNoWhereNoOrderBy")}
    "where" Exp "order" "by" OrderExp Limit  -> Filter {cons("Filter")}
    Exp                                      -> OrderExp {cons("OrderNonSpecific")}
    Exp "asc"                                -> OrderExp {cons("OrderAscending")}
    Exp "desc"                               -> OrderExp {cons("OrderDescending")}
    "limit" Exp "offset" Exp                 -> Limit {cons("Limit")}
    "limit" Exp                              -> Limit {cons("LimitNoOffset")}
    "offset" Exp                             -> Limit {cons("LimitNoLimit")}
    
    ID "==" Exp                              -> SetExp {cons("SetEq")}
    ID "!=" Exp                              -> SetExp {cons("SetNotEq")}
    ID "<" Exp                               -> SetExp {cons("SetLt")}
    ID "<=" Exp                              -> SetExp {cons("SetLeq")}
    ID ">" Exp                               -> SetExp {cons("SetGt")}
    ID ">=" Exp                              -> SetExp {cons("SetGeq")}

    SetExp "&&" SetExp                       -> SetExp {left, cons("SetAnd")}
    
    
  context-free priorities
    Exp TermOperatorMethodId Exp -> Exp
  > Exp OperatorMethodId Exp -> Exp
  > Exp CompareMethodId Exp -> Exp
  > Exp BoolMethodId Exp -> Exp

  context-free priorities  
  {
    ID "==" Exp                              -> SetExp
    ID "!=" Exp                              -> SetExp
    ID "<" Exp                               -> SetExp
    ID "<=" Exp                              -> SetExp
    ID ">" Exp                               -> SetExp
    ID ">=" Exp                              -> SetExp
  }
  > SetExp "&&" SetExp                       -> SetExp
  
  
  lexical syntax
    "||"                     -> BoolMethodId
    "&&"                     -> BoolMethodId
    "=="                     -> CompareMethodId
    "!="                     -> CompareMethodId
    "<"                      -> CompareMethodId
    "<="                     -> CompareMethodId
    ">"                      -> CompareMethodId
    ">="                     -> CompareMethodId
    "*"                      -> TermOperatorMethodId
    "/"                      -> TermOperatorMethodId
    "<<"                     -> TermOperatorMethodId
    ">>"                     -> TermOperatorMethodId
    "&"                      -> TermOperatorMethodId
    "|"                      -> TermOperatorMethodId
    "%"                      -> TermOperatorMethodId
    "+"                      -> OperatorMethodId
    "-"                      -> OperatorMethodId
    "++"                     -> PostFixId
    "--"                     -> PostFixId
    Id                       -> MethodId
    BoolMethodId             -> MethodId
    CompareMethodId          -> MethodId
    TermOperatorMethodId     -> MethodId
    OperatorMethodId         -> MethodId
    PostFixId                -> MethodId
    
  lexical syntax
    "template" -> ID {reject}
    "var" -> ID {reject}
    "init" -> ID {reject}
    "screen" -> ID {reject}
    "entity" -> ID {reject}
    "uri" -> ID {reject}
    "list" -> ID {reject}
    "placeholder" -> ID {reject}
    "if" -> ID {reject}
    
    