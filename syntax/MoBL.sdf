module MoBL

imports
  Common
  MoBL-UI
  MoBL-Data
  MoBL-Action
  MoBL-Service
  MoBL-Type
  MoBL-Regex
  MoBL-External
  MoBL-Server

exports

  context-free start-symbols
    Start

  context-free syntax %% Main

    ID                               -> QId
    QId "::" ID                      -> QId {cons("QId")}
    "module" QId Definition*         -> Start {cons("Module")}
    "application" ID Setting* Definition* -> Start {cons("Application")}

    "title" STRING                   -> Setting {cons("TitleSetting")}
    "database" STRING                -> Setting {cons("DatabaseSetting")}
    "offline"  Exp                   -> Setting {cons("OfflineSetting")}
    "icon" Path                      -> Setting {cons("IconSetting")}
    "version" STRING                 -> Setting {cons("VersionSetting")}

    "dynamic" "import" QId         -> Definition {cons("DynamicImport")}
    "import" QId                   -> Definition {cons("Import")}
    "load" Path                    -> Definition {cons("Load")}
    "resource" Path                -> Definition {cons("Resource")}

    ID ":" Type                    -> FArg {cons("FArg")}
    ID ":" Type "=" Exp            -> FArg {cons("FArgOptional")}

    QId                            -> NFType {cons("SimpleType")}
    QId "<" {Type ","}* ">"        -> NFType {cons("GenericType")}
    "(" {Type ","}* ")"            -> NFType {cons("TupleType")}
    "[" Type "]"                   -> NFType {cons("ArrayType")}
    NFType                         -> Type
    {NFType "*"}+ "->" NFType      -> Type {cons("FunctionType"), avoid}

    "@doc" STRING                  -> MetaAnno {cons("DocAnno")}
    "@cond" Exp                    -> MetaAnno {cons("ConditionalAnno")}
    "@persistable"                 -> MetaAnno {cons("PersistableAnno")}

    "@" Exp                        -> MetaAnno {cons("DecoratorAnno"), avoid}

  context-free syntax %% Paths
    {FILENAME "/"}+                  -> Path {cons("Path")}
    STRING                           -> Path {cons("QuotedPath")}

  context-free syntax %% native javascript

    "<javascript>" JSString "</javascript>"  -> Definition {cons("Javascript"), prefer}

  lexical syntax
    JSChar*       -> JSString
    ~[\<]         -> JSChar
    SmallerThan   -> JSChar
    [\<]          -> SmallerThan
    ""            -> JSString{reject}

  lexical restrictions
    SmallerThan   -/- [\/]
    JSString -/- [\ \t\n\r]
    JSString -/- ~[\<]

  context-free syntax %% Paths
    "/" {UriPart "/"}*                  -> UriPath {cons("UriPath")}

    FILENAME  -> UriPart {cons("UriPart")}
    ":" ID    -> UriPart {cons("UriVar")}

  lexical syntax
    "control" -> ID {reject}
    "var" -> ID {reject}
    "script" -> ID {reject}
    "screen" -> ID {reject}
    "entity" -> ID {reject}
    "function" -> ID {reject}
    "callback" -> ID {reject}
    %%"sync" -> ID {reject}
    "null" -> ID {reject}
    "return" -> ID {reject}
    "true" -> ID {reject}
    "false" -> ID {reject}
    "if" -> ID {reject}
    "databind" -> ID {reject}
    "cond" -> ID {reject}

