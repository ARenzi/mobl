[
   RegexId                   -- H hs=0 [ _1],
   DoubleQuote               -- H hs=0 [ KW["\""]],
   QuotedAtom                -- H hs=0 [ KW["\\Q"] _1 KW["\\E"]],
   Quoted                    -- H hs=0 [ KW["\\"] _1],
   Newline                   -- H hs=0 [ KW["\\n"]],
   Newline                   -- H hs=0 [ KW["\\n"]],
   Tab                       -- H hs=0 [ KW["\\t"]],
   Tab                       -- H hs=0 [ KW["\\t"]],
   WhiteSpace                -- H hs=0 [ KW["Space"]],
   WhiteSpaceChar            -- H hs=0 [ KW["\\s"]],
   NonWhiteSpaceChar         -- H hs=0 [ KW["\\S"]],
   Space                     -- H hs=0 [ KW["\\ "]],
   WhiteSpaceChar            -- H hs=0 [ KW["\\s"]],
   NonWhiteSpaceChar         -- H hs=0 [ KW["\\S"]],
   Space                     -- H hs=0 [ KW["\\ "]],
   BackReference             -- H hs=0 [ KW["\\"] _1],
   EndInputFinalBoundry      -- H hs=0 [ KW["\\z"]],
   EndInputBoundry           -- H hs=0 [ KW["\\Z"]],
   PrevMatchEndBoundry       -- H hs=0 [ KW["\\G"]],
   InputBeginBoundry         -- H hs=0 [ KW["\\A"]],
   NonWordBoundry            -- H hs=0 [ KW["\\B"]],
   WordBoundry               -- H hs=0 [ KW["\\b"]],
   NonWordBoundry            -- H hs=0 [ KW["\\B"]],
   WordBoundry               -- H hs=0 [ KW["\\b"]],
   NonWordBoundry            -- H hs=0 [ KW["\\B"]],
   ControlCharacter          -- H hs=0 [ KW["\\c"] _1],
   NonDigitChar              -- H hs=0 [ KW["\\D"]],
   DigitChar                 -- H hs=0 [ KW["\\d"]],
   NonDigitChar              -- H hs=0 [ KW["\\D"]],
   DigitChar                 -- H hs=0 [ KW["\\d"]],
   NonDigitChar              -- H hs=0 [ KW["\\D"]],
   NonWhiteSpaceChar         -- H hs=0 [ KW["\\S"]],
   WhiteSpaceChar            -- H hs=0 [ KW["\\s"]],
   NonWordChar               -- H hs=0 [ KW["\\W"]],
   WordChar                  -- H hs=0 [ KW["\\w"]],
   NonWordChar               -- H hs=0 [ KW["\\W"]],
   WordChar                  -- H hs=0 [ KW["\\w"]],
   NonWordChar               -- H hs=0 [ KW["\\W"]],
   Escape                    -- H hs=0 [ KW["\\e"]],
   Alarm                     -- H hs=0 [ KW["\\a"]],
   Formfeed                  -- H hs=0 [ KW["\\f"]],
   Return                    -- H hs=0 [ KW["\\r"]],
   DecHexChar                -- H hs=0 [ KW["\\u"] _1],
   HexHexChar                -- H hs=0 [ KW["\\x"] _1],
   OctalChar                 -- H hs=0 [ KW["\\0"] _1],
   CurrencySymbol            -- H hs=0 [ KW["Sc"]],
   UppercaseLetter           -- H hs=0 [ KW["Lu"]],
   GreekBlock                -- H hs=0 [ KW["InGreek"]],
   JavaIsMirrored            -- H hs=0 [ KW["javaMirrored"]],
   JavaIsWhitespace          -- H hs=0 [ KW["javaWhitespace"]],
   JavaIsLowerCase           -- H hs=0 [ KW["javaLowerCase"]],
   JavaIsLowerCase           -- H hs=0 [ KW["javaUpperCase"]],
   WhiteSpace                -- H hs=0 [ KW["Space"]],
   XDigitClass               -- H hs=0 [ KW["XDigit"]],
   CntrlClass                -- H hs=0 [ KW["Cntrl"]],
   BlankClass                -- H hs=0 [ KW["Blank"]],
   PrintClass                -- H hs=0 [ KW["Print"]],
   GraphClass                -- H hs=0 [ KW["Graph"]],
   PunctClass                -- H hs=0 [ KW["Punct"]],
   AlnumClass                -- H hs=0 [ KW["Alnum"]],
   DigitClass                -- H hs=0 [ KW["Digit"]],
   XDigitClass               -- H hs=0 [ KW["XDigit"]],
   AlphaClass                -- H hs=0 [ KW["Alpha"]],
   ASCIIClass                -- H hs=0 [ KW["ASCII"]],
   UpperClass                -- H hs=0 [ KW["Upper"]],
   LowerClass                -- H hs=0 [ KW["Lower"]],
   BracketCharacter          -- H hs=0 [ _1],
   BracketLiteral            -- H hs=0 [ _1],
   Union                     -- H hs=0 [ _1],
   Range.2:alt               -- H hs=0 [_1 _2],
   Range.1:alt               -- H hs=0 [_1 _2],
   Range                     -- H hs=0 [_1 KW["-"] _2],
   NegatedBracketList.1:iter -- H hs=0 [ _1],
   NegatedBracketList        -- H hs=0 [ KW["[^"] _1 KW["]"]],
   BracketList.1:iter        -- H hs=0 [ _1],
   BracketList               -- H hs=0 [ KW["["] _1 KW["]"]],
   QuotedAtom                -- H hs=0 [ KW["\\Q"] _1 KW["\\E"]],
   AtomCharacter             -- H hs=0 [ _1],
   AtomLiteral               -- H hs=0 [ _1],
   CharacterClass            -- H hs=0 [ _1],
   LineEnd                   -- H hs=0 [ KW["$"]],
   LineStart                 -- H hs=0 [ KW["^"]],
   SingleCharacter           -- H hs=0 [ KW["."]],
   RegexCapture              -- H hs=0 [ KW["("] _1 KW[")@{"] _2 KW["}"]],
   PythonCapture             -- H hs=0 [ KW["(?P<"] _1 KW[">"] _2 KW[")"]],
   NegativeLookbehind        -- H hs=0 [ KW["(?<!"] _1 KW[")"]],
   PositiveLookbehind        -- H hs=0 [ KW["(?<="] _1 KW[")"]],
   NegativeLookahead         -- H hs=0 [ KW["(?!"] _1 KW[")"]],
   PositiveLookahead         -- H hs=0 [ KW["(?="] _1 KW[")"]],
   NonCapture                -- H hs=0 [ KW["(?:"] _1 KW[")"]],
   Capture                   -- H hs=0 [ KW["("] _1 KW[")"]],
   NonCapture                -- H hs=0 [ KW["(?:"] _1 KW[")"]],
   PythonCapture             -- H hs=0 [ KW["(?P<"] _1 KW[">"] _2 KW[")"]],
   RegexCapture              -- H hs=0 [ KW["("] _1 KW[")@{"] _2 KW["}"]],
   PossessiveOneOrMore       -- H hs=0 [ KW["++"]],
   PossessiveZeroOrMore      -- H hs=0 [ KW["*+"]],
   PossessiveOnceOrNot       -- H hs=0 [ KW["?+"]],
   PossessiveLowerUpperBound -- H hs=0 [ KW["{"] _1 KW["],"] _2 KW["}+"]],
   PossessiveLowerBound      -- H hs=0 [ KW["{"] _1 KW["],"] KW["}+"]],
   PossessiveExactBound      -- H hs=0 [ KW["{"] _1 KW["}+"]],
   ReluctantOneOrMore        -- H hs=0 [ KW["+?"]],
   ReluctantZeroOrMore       -- H hs=0 [ KW["*?"]],
   ReluctantOnceOrNot        -- H hs=0 [ KW["??"]],
   ReluctantLowerUpperBound  -- H hs=0 [ KW["{"] _1 KW["],"] _2 KW["}?"]],
   ReluctantLowerBound       -- H hs=0 [ KW["{"] _1 KW["],"] KW["}?"]],
   ReluctantExactBound       -- H hs=0 [KW["{"] _1 KW["}?"]],
   GreedyOneOrMore           -- H hs=0 [KW["+"]],
   GreedyZeroOrMore          -- H hs=0 [KW["*"]],
   GreedyOnceOrNot           -- H hs=0 [KW["?"]],
   GreedyLowerUpperBound     -- H hs=0 [KW["{"] _1 KW["],"] _2 KW["}"]],
   GreedyLowerBound          -- H hs=0 [KW["{"] _1 KW["],"] KW["}"]],
   GreedyExactBound          -- H hs=0 [KW["{"] _1 KW["}"]],
   QuantifiedAtom            -- H hs=0 [_1 _2],
   SingleAtom                -- H hs=0 [_1],
   Pieces.1:iter             -- H hs=0 [_1],
   Pieces                    -- H hs=0 [_1],
   TupleBranch               -- H hs=0 [_1 KW["|"] _2],
   SingleBranch              -- H hs=0 [_1],
   Regex                     -- H hs=0 [ KW["/"] _1 KW["/"] ]
]