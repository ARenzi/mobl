module mobl

load "lib/iphone.css"

external type void {}
external type String : Object { }
external type Int : Object { }
external type Bool : Object { }
external type Text : Object { }

external type Callback {}
external type Template {}

external type DateTime {}
external type Array<T> {}

external type Object {
  sync function toString() : String
}

external type Collection<T> {
  //function get() : Array<T>
  function one() : T
  sync function prefetch(property : String) : Collection<T>
  sync function filter(property : String, op : String, value : Object) : Collection<T>
  sync function order(property : String, ascending : Bool) : Collection<T>
  sync function limit(n : Int) : Collection<T>
  sync function offset(n : Int) : Collection<T>
  sync function add(item : T) : void
  sync function remove(item : T) : void
}

external type Entity<T> {
  static sync function all() : Collection<T>
}

external function log(s : String) : void
external function alert(s : String) : void

external sync function add(e : Object) : void
external sync function remove(e : Object) : void
external function resetDatabase() : void
external sync function formatDate(d : DateTime) : String

template outputString(s : String) {
  <span databind=s></span>
}

template outputInt(n : Int) {
  <span databind=n></span>
}

template outputDate(d : DateTime) {
  <span databind=formatDate(d)/>
}

screen promptString(question : String) : String {
  var answer : String = ""
  header(question)
  inputs {
    inputString(answer)
  }
  button("Ok", onclick={ screen return answer; })  
}

template inputString(s : String, placeholder : String = null, onchange : Callback = null) {
  <li>
    <input type="text" placeholder=placeholder databind=s/>
  </li>
}

template inputText(s : String, placeholder : String = null, onchange : Callback = null) {
  <li>
    <textarea placeholder=placeholder databind=s/>
  </li>
}

template inputSecret(s : String, placeholder : String = null, onchange : Callback = null) {
  <li>
    <input type="password" placeholder=placeholder databind=s/>
  </li>
}

template inputInt(i : Int, placeholder : String = null, onchange : Callback = null) {
  <li>
    <input type="text" placeholder=placeholder databind=i/>
  </li>
}

template inputs() {
  <ul>
    elements()
  </ul>
}

template inputCheckbox(b : Bool, onchange : Callback = null, onclick : Callback = null) {
  <input type="checkbox" databind=b onchange=onchange onclick=onclick/>
}

template header(title : String) {
  <div id="header">
    <h1 databind=title></h1>
  </div>
}

template basicView(title : String, toolBar : Template = template{}) {
  header(title)
  <div id="scrollwrapper">
    <div id="content">
      elements()
    </div>
  </div>
  <div id="footer">
  toolBar()
  </div>
}

template ul() {
  <ul>
    elements()
  </ul>
}
 
template listitem(onclick : Callback = null) {
  <li onclick=onclick>elements()</li>
}

template listitemArrow(onclick : Callback = null) {
  <li onclick=onclick class="arrow">elements()</li>
}

template image(url : String, onclick : Callback = null) {
  <img src=url onclick=onclick/>
}

template button(text : String, onclick : Callback = null) {
  <a href="javascript:void(0)" class="redButton" databind=text onclick=onclick></a>
}

template altButton(text : String, onclick : Callback = null) {
  <a href="javascript:void(0)" class="whiteButton" databind=text onclick=onclick></a>
}


template deleteButton(text : String, onclick : Callback = null) {
  <a href="javascript:void(0)" class="button" databind=text onclick=onclick></a>
}

template topRightButton(text : String, onclick : Callback = null) {
  <a href="javascript:void(0)" class="topRightButton" databind=text onclick=onclick></a>
}

template backButton(text : String, onclick : Callback = null) {
  <a href="javascript:void(0)" class="backButton" id="back-button" databind=text onclick=onclick></a>
}

template toolbarButton(type : String, onclick : Callback = null) {
  <img src="lib/toolbar/icon_" + type + ".png" width="30" height="30" class="toolbarButton" onclick=onclick/>
}

<script>
mobl.alert = function(s, _, callback) {
    alert(s);
    if(callback) callback();
};
mobl.log = function(s, _, callback) {
    console.log(s);
    if(callback) callback();
};
mobl.add = function(e, _, callback) {
    persistence.add(e);
    var allEnt = persistence.define(e._type).all(); // NOTE: define() is a hack!
    allEnt.triggerEvent('add', allEnt, e);
    if(callback) callback();
};
mobl.remove = function(e, _, callback) {
    persistence.remove(e);
    var allEnt = persistence.define(e._type).all();
    allEnt.triggerEvent('remove', allEnt, e);
    if(callback) callback();
};
mobl.resetDatabase = function(_, callback) {
    persistence.reset(null, callback);
};

mobl.formatDate = function(timestamp) {
  var date = new Date(timestamp);
  var diff = (((new Date()).getTime() - date.getTime()) / 1000);
  var day_diff = Math.floor(diff / 86400);
  if ( isNaN(day_diff) || day_diff < 0 || day_diff >= 31 )
    return;

  return day_diff == 0 && (
      diff < 60 && "just now" ||
      diff < 120 && "1 minute ago" ||
      diff < 3600 && Math.floor( diff / 60 ) + " minutes ago" ||
      diff < 7200 && "1 hour ago" ||
      diff < 86400 && Math.floor( diff / 3600 ) + " hours ago") ||
      day_diff == 1 && "Yesterday" ||
      day_diff < 7 && day_diff + " days ago" ||
      day_diff < 31 && Math.ceil( day_diff / 7 ) + " weeks ago";
};
</script>