application dates

import mobl
import mobl::ui::ios
import mobl::ui::ios::datepicker

entity Person {
  name     : String
  birthday : DateTime
}

control showDay(n : Num, d : DateTime) {
  row {
    cell(width="40%") { label(n) }
    cell { label(addDays(d, n).toDateString()) }
  }
}

control showWeek(n : Num, d : DateTime) {
  row {
    cell(width="40%") { label(n) }
    cell { label(addWeeks(d, n).toDateString()) }
  }
}

control showMonth(n : Num, d : DateTime) {
  row {
    cell(width="40%") { label(n) }
    cell { label(addMonths(d, n).toDateString()) }
  }
}

function displayLocationAndReturn() : mobl::location::Coordinates {
  var position = mobl::location::getPosition();
  alert("Lat: "  + position.latitude);
  alert("Long: " + position.longitude);
  return position;
}

screen root() {
  header("People") {
    button("Add", onclick={ addPerson(); })
  }
  group {
    list(p in Person.all()) {
      itemArrow(onclick={personDates(p); }) { label(p.name) }
    }
    itemArrow(onclick={allDates();}) { "All" }
  }
}

screen addPerson() {
  var p = Person{ birthday = now() }
  header("Add person") {
    button("Done", onclick={
      add(p);
      screen return;
    })
  }
  group {
    textField(p.name, placeholder="Name")
  }
  group {
    item { datePicker(p.birthday) }
  }
}

function countDaysOld(since : DateTime) : Num {
  var factor = 1000*60*60*24;
  var sinceEpoch = (now().getTime() - since.getTime()) / factor;
  return sinceEpoch;
}

function daysUntil(daysOld : Num, persons : Collection<Person>) : Num {
  var sum = 0;
  for(p in persons) {
    sum = sum + countDaysOld(p.birthday);
  }
  return (daysOld - sum)/3;
}

screen allDates() {
  header("Group") {
  backButton("Back", onclick={ screen return; })
  }
  table {
    row {
      cell{ <b>"Days"</b> }
      cell { <b>"Date"</b> }
    }
    row {
      cell { "1000" }
      cell { label(addDays(now(), daysUntil(1000, Person.all())))}
    }
  }
}

screen personDates(p : Person) {
  var birthday : DateTime = p.birthday // shortcut
  header("Birthdays")
  backButton("Back", onclick={ screen return; })
  group {
    datePicker(birthday)
  }
  table {
    row {
      cell{ <b>"Days"</b> }
      cell { <b>"Date"</b> }
    }
    showDay(100, birthday)
    showDay(1000, birthday)
    showDay(10000, birthday)
    showDay(20000, birthday)
    showDay(25000, birthday)
  }
  table {
    row {
      cell{ <b>"Weeks"</b> }
      cell { <b>"Date"</b> }
    }
    showWeek(100, birthday)
    showWeek(1000, birthday)
    showWeek(10000, birthday)
    showWeek(20000, birthday)
  }
  table {
    row {
      cell{ <b>"Months"</b> }
      cell { <b>"Date"</b> }
    }
    showMonth(100, birthday)
    showMonth(250, birthday)
    showMonth(500, birthday)
    showMonth(1000, birthday)
  }
}

function addDays(d : DateTime, n : Num) : DateTime {
  return makeDate(d.getFullYear(), d.getMonth(), d.getDate() + n);
}

function addWeeks(d : DateTime, n : Num) : DateTime {
  return makeDate(d.getFullYear(), d.getMonth(), d.getDate() + 7*n);
}

function addMonths(d : DateTime, n : Num) : DateTime {
  return makeDate(d.getFullYear(), d.getMonth() + n, d.getDate());
}

external sync function makeDate(year : Num, month : Num, day : Num) : DateTime

<javascript>
dates.makeDate = function(year, month, day) {
  return new Date(year, month, day);
}
</javascript>