module analyze

imports
  libstratego-lib
  include/MoBL
  lib/editor-common
  declare
  lookup
  type
  rename
  normalize
  desugar
  mobl
  resolve
  generation/compile
  sync-analysis

rules

  // Analysis: does a topdown traversal of the tree,
  // and try to apply the record-entity rule.
  analyze =
    (?Module(qid, def*) <+ ?Application(qid, _, def*))
    ; {| ModuleName, Imports
       : rules ( ModuleName := qid )
       ; ensure-mobl-import
       ; import-all
       ; normalize-all
       ; alltd(origin-track-forced(add-tl-namespace))
       ; declare-all
       ; rename-all
       ; add-namespace-all
       ; declare-all
       ; rename-all
       ; add-namespace-all
       ; analyze-sync
       ; declare-all
       //; declare-all
       //; rename-all
         //; debug
       |}

  ensure-mobl-import :
    Module(qid, def*) -> Module(qid, def2*)
    where if <"mobl" := qid <+ fetch(?Import("mobl"))> def* then
            def2* := def*
          else
            def2* := [Import("mobl")|def*]
          end

  ensure-mobl-import :
    Application(qid, setting*, def*) -> Application(qid, setting*, def2*)
    where if <"mobl" := qid <+ fetch(?Import("mobl"))> def* then
            def2* := def*
          else
            def2* := [Import("mobl")|def*]
          end

  import-all =
    alltd(import-module)

  import-module :
    Import(qid) -> Import(qid)
    where (<ParsedAndImported> qid
           ; rules ( Imports :+= qid )
        <+ rules ( ParsedAndImported : qid )
         ; where(<open-import(\ path -> <resolve-file> <concat-strings> [path, ".mobl"] \, parse-file, externalize-module)> <qid-to-path> qid
             ; <declare-all> Module(qid, <id>))
         ; rules ( Imports :+= qid )
           )

  compile-import-module :
    Import(qid) -> Import(qid)
    where <compile-import-module> QId(qid, "whatever")

  compile-import-module :
    DynamicImport(qid) -> Import(qid)
    where <compile-import-module> QId(qid, "whatever")

  compile-import-module =
    ?QId(qid, _)
    ; where(path := <resolve-file> <concat-strings> [<qid-to-path> qid, ".mobl"]
        ; if not(<Compiled> qid <+ <is-newer> (<concat-strings; guarantee-extension(|"js")> [<OutputPath>, "/", <qid-to-path> qid], path)) then
            <parse-file> path
            ; compile
          end
      )

  lookup-import-module =
    ?Import(qid)
    ; (<ParsedAndImported> qid
    <+ rules ( ParsedAndImported : qid )
     //; debug(!"Importing: ")
     ; where(<open-import(\ path -> <resolve-file> <concat-strings> [path, ".mobl"] \, parse-file, externalize-module)> <qid-to-path> qid
             ; <declare-all> Module(qid, <id>))
      )

  get-module-defs :
    qid -> def*
    with def* := <open-import(\ path -> <resolve-file> <concat-strings> [path, ".mobl"] \, parse-file, externalize-module)> <qid-to-path> qid

  externalize-module :
    Module(qid, def*) -> def2*
    with def2* := <analyze; ?Module(_, <id>); filter(origin-track-forced(definition-to-external))>

  externalize-module :
    Application(qid, _, def*) -> def2*
    with def2* := <analyze; ?Application(_, _, <id>); filter(definition-to-external)>

