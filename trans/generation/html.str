module generation/html

imports
  include/MoBL
  generation/action
  generation/compile
  pp

strategies

  generate-index-html(|res*) :
    Application(qid, setting*, _) -> $[
<!DOCTYPE HTML>
<html [html-manifest]>
    <head>
        <title>[<!<un-double-quote> title <+ <qid-to-js> qid>]</title>
        <base href="[<qid-to-parent-dir; separate-by(|"/")> qid]" />
        <meta name="viewport" content="user-scalable=no, width=device-width, initial-scale=1.0, maximum-scale=1.0" />
        <meta name="apple-mobile-web-app-capable" content="yes" />
        <meta names="apple-mobile-web-app-status-bar-style" content="black-translucent" />
        [<filter(res-to-script-html)> res*]
        <script type="application/x-javascript" charset="utf-8">
            if (window && window.google && google.gears || window.openDatabase) {
              persistence.store.websql.config(persistence, '[<!<un-double-quote> dbname <+ <qid-to-js> qid>]', 'mobl database', 5 * 1024 * 1024, '1.0');
            } else {
              persistence.store.memory.config(persistence);
            }
            mobl.icon = "[<<path-to-string> icon <+ !"img/default-icon.png">]";
            mobl.load('[<qid-to-path> qid].js');
            $(function(){
                persistence.schemaSync(function(tx) {
                    mobl.call("[<qid-to-js> qid].root", $[$$]$, function() {});
                });
            });
        </script>
    </head>
    <body>
    </body>
</html>
    ]
    with <filter(?TitleSetting(title))> setting*
       ; <filter(?DatabaseSetting(dbname))> setting*
       ; <filter(?IconSetting(icon))> setting*
       ; html-manifest := <fetch(?OfflineSetting(True())); !$[manifest="[<qid-to-path> qid].manifest"] <+ !""> setting*

  qid-to-parent-dir :
    s -> []
    where is-string

  qid-to-parent-dir :
    QId(qid, x) -> [".."|<qid-to-parent-dir> qid]

  generate-chrome-manifest(|res*) :
    Application(qid, setting*, _) -> $[
{
  "name": "[<!<un-double-quote> title <+ <qid-to-js> qid>]",
  "version": "[<!<un-double-quote> version <+ !"1">]",
  "app": {
    "launch": {
      "local_path": "[<qid-to-path> qid].html"
    }
  },
  "icons": {
    "24": "[<<path-to-string> icon <+ !"img/default-icon.png">]",
    "128": "[<<path-to-string> icon <+ !"img/default-icon.png">]"
  },
  "permissions": $[$
    "unlimited_storage",
    "geolocation",
    "notifications"
  $]$
}
    ]
    with <filter(?TitleSetting(title))> setting*
       ; <filter(?IconSetting(icon))> setting*
       ; <filter(?VersionSetting(version))> setting*

  res-to-script-html :
    filename -> $[<script src="[filename]" type="application/x-javascript" charset="utf-8"></script>
]
    where <string-ends-with(|".js")> filename

  res-to-script-html :
    filename -> $[<link rel="stylesheet" type="text/css" href="[filename]"/>
]
    where <string-ends-with(|".css")> filename

  generate-manifest :
    res* -> $[CACHE MANIFEST
              # Something random: [<newname> "random"]
              [<separate-by(|"\n")> res*]]