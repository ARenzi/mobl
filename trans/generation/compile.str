module generation/compile

imports
  libstratego-lib
  analyze
  declare
  rename
  desugar
  mobl
  generation/emit
  generation/ui
  generation/action
  generation/data
  generation/script
  generation/html
  generation/service
  generation/type
  include/MoBL
  lib/editor-common
  sync-analysis

strategies

  mkdirs =
    where(old := <getcwd>; <chdir> "/")
    ; where(map((file-exists <+ mkdir(|"w") <+ debug(!"Failed to created: ")); chdir)
            ; <chdir> old)
    ; separate-by(|"/"); concat-strings


  ensure-existing-dir :
    dir -> dir
    where parts := <string-tokenize(|<explode-string> "/")> dir
        ; <mkdirs> parts

  compile =
      (?Module(qid, def*) <+ ?app@Application(qid, setting*, def*))
      ; where(<debug(!"Now compiling: ")> qid
              ; rules ( Compiled : qid ))
      ; analyze
      ; where(alltd(compile-import-module))
      ; desugar-all
      ; module-to-js
      ; where(path := <qid-to-path> qid
              ; js-filename   := <concat-strings; guarantee-extension(|"js")> [<OutputPath>, "/", path]
              ; <dirname; ensure-existing-dir> js-filename
              ; index-html-filename   := <concat-strings; guarantee-extension(|"html")> [<OutputPath>, "/", path]
              ; manifest-filename   := <concat-strings; guarantee-extension(|"manifest")> [<OutputPath>, "/", path])
      ; fp := <fopen> (js-filename, "w")
      ; <fputs> ($[mobl.provides('[<qid-to-js> qid]');
], fp)
      ; <fputs> (<get-all>, fp)
      ; <fclose> fp
      ; if !app then
        with(
          fp2 := <fopen <+ debug(!"Could not open file: "); fail> (index-html-filename, "w")
          ; {| ResourceProcessed
             : <fputs> (<generate-index-html(|<get-all-resources-no-dynamic> qid) <+ debug(!"Could not generate index.html")> app, fp2)
             |}
          ; <fclose> fp2
          ; <refresh-workspace-file> index-html-filename
          ; if <fetch(?OfflineSetting(True()))> setting* then
              fp3 := <fopen <+ debug(!"Could not open file: "); fail> (manifest-filename, "w")
              ; {| ResourceProcessed
                 : <fputs> (<generate-manifest <+ debug(!"Could not generate index.html")> <get-all-resources> qid, fp3)
                 |}
              ; <fclose> fp3
              ; <refresh-workspace-file> manifest-filename
            end
        )
        end
      ; <refresh-workspace-file> js-filename

  get-all-resources :
    qid -> [res*, import*, $[[<qid-to-path> qid].js]]
    where not(ResourceProcessed)
    with rules ( ResourceProcessed : qid )
       ; def* := <get-module-defs> qid
       ; res* := <filter((?Resource(<id>) <+ ?Load(<id>)); path-to-string)> def*
       ; import* := <filter((?Import(<id>) <+ ?DynamicImport(<id>)); get-all-resources); concat> def*

  get-all-resources-no-dynamic :
    qid -> [res*, import*, $[[<qid-to-path> qid].js]]
    where not(ResourceProcessed)
    with rules ( ResourceProcessed : qid )
       ; def* := <get-module-defs> qid
       ; res* := <filter((?Resource(<id>) <+ ?Load(<id>)); path-to-string)> def*
       ; import* := <filter(?Import(<id>); get-all-resources); concat> def*

  get-all-resources-no-dynamic :
    qid -> []
    where ResourceProcessed

  get-all-resources :
    qid -> []
    where ResourceProcessed

strategies

  qid-to-path =
    is-string

  qid-to-path :
    QId(qid, x) -> $[[qids]/[x]]
    with qids := <qid-to-path> qid
