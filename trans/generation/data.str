module generation/data

imports
  include/MoBL
  generation/emit
  generation/ui
  generation/action
  generation/sql
  lookup

strategies
  entities-to-js =
    {| OneToMany
     : map(entity-to-js)
     ; <map(one-to-many-to-js)> <bagof-OneToMany>
     //; <emit> $[persistence.schemaSync();]
     |}
     
  entity-to-js :
    Entity(qid, super, prop*) -> <emit> $[
    [varname] = persistence.define('[<qid-to-html> qid]', {
      [props]
    });
    ]
    with props := <filter(property-to-js(|qid)); separate-by(!",\n"); concat-strings> prop*
       ; if <is-string> qid then
           varname := $[var [qid]]
         else
           varname := <qid-to-js> qid
         end

  property-to-js(|ent) :
    Property(x, t@SimpleType(_), anno*) -> $['[x]': '[sqlType]']
    where not(<is-entity-type> t)
    with sqlType := <sql-type> t

  property-to-js(|ent) :
    Property(x, GenericType(coll, [t]), anno*) -> <fail>
    where <filter(?InverseAnno(inv))> anno*
        ; rules ( OneToMany :+= (SimpleType(ent), x, t, inv) )

  one-to-many-to-js :
    (SimpleType(from), field, SimpleType(to), invField) -> <emit> $[[<qid-to-js> from].hasMany('[field]', [<qid-to-js> to], '[invField]');
]