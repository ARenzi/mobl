module generation/lift

imports
  include/MoBL
  rename
  declare
  lookup
  type

strategies
  strategies // expression lifting
  
  //cps-lift-expressions = debug(!"lift: "); fail
  
  cps-lift-expressions =
       cps-lift-exprs
    <+ ?[a|k]
       ; ![a|<cps-lift-expressions> k] 

  cps-lift-expressions :
    [] -> []

  cps-lift-exprs :
    [Return(e)|stats] -> <concat> [stats2, [Return(e2)|<cps-lift-expressions> stats]]
    where not(<is-sync> e)
    with {| Exp
          : stats2 := <cps-lift-expression> e
          ; e2 := <Exp>
          |}

  cps-lift-exprs :
    [ScreenReturn(e)|stats] -> <concat> [stats2, [ScreenReturn(e2)|<cps-lift-expressions> stats]]
    where not(<is-sync> e)
    with {| Exp
          : stats2 := <cps-lift-expression> e
          ; e2 := <Exp>
          |}

  cps-lift-exprs :
    [VarDecl(x, t, e)|stats] -> <concat> [stats2, [VarDecl(x, t, e2)|<cps-lift-expressions> stats]]
    where not(<is-sync> e)
    with {| Exp
          : stats2 := <cps-lift-expression> e
          ; e2 := <Exp>
          |}

  cps-lift-exprs :
    [VarDeclInferred(x, e)|stats] -> <concat> [stats2, [VarDeclInferred(x, e2)|<cps-lift-expressions> stats]]
    where not(<is-sync> e)
    with {| Exp
          : stats2 := <cps-lift-expression> e
          ; e2 := <Exp>
          |}

  cps-lift-exprs :
    [Assignment(qid, e)|stats] -> <concat> [stats2, [Assignment(qid, e2)|<cps-lift-expressions> stats]]
    where not(<is-sync> e)
    with {| Exp
          : stats2 := <cps-lift-expression> e
          ; e2 := <Exp>
          |}

  cps-lift-exprs :
    [ExpStat(e)|stats] -> <concat> [stats2, <cps-lift-expressions> stats]
    where not(<is-sync> e)
    with {| Exp
          : stats2 := <cps-lift-expression> e
          ; e2 := <Exp>
          |}

  cps-lift-exprs :
    [Async(stat*)|stats] -> 
    [Async(<cps-lift-expressions> stat*)|<cps-lift-expressions> stats]

  cps-lift-exprs :
    [If(e, true-stat*, false-stat*)|stats] -> 
    <concat> [stats2, [If(e2, <cps-lift-expressions> true-stat*, <cps-lift-expressions> false-stat*)|<cps-lift-expressions> stats]]
    where not(<is-sync> e)
    with {| Exp
          : stats2 := <cps-lift-expression> e
          ; e2 := <Exp>
          |}

  cps-lift-exprs :
    [For(x, t, e, stat*)|stats] ->
    <concat> [stats2, [For(x, t, e2, <cps-lift-expressions> stat*)|<cps-lift-expressions> stats]]
    where not(<is-sync> e)
    with {| Exp
          : stats2 := <cps-lift-expression> e
          ; e2 := <Exp>
          |}

  cps-lift-exprs :
    [If(e, true-stat*, false-stat*)|stats] -> 
    [If(e, <cps-lift-expressions> true-stat*, <cps-lift-expressions> false-stat*)|<cps-lift-expressions> stats]
    where <is-sync> e

  cps-lift-exprs :
    [For(x, t, e, stat*)|stats] ->
    [For(x, t, e, <cps-lift-expressions> stat*)|<cps-lift-expressions> stats]
    where <is-sync> e

rules
  
  cps-lift-expression :
    e -> []
    where is-sync
    with rules ( Exp :+= e)
  
  /*cps-lift-expression :
    e@Var(_) -> []
    with rules ( Exp :+= e )

  cps-lift-expression :
    e@Int(_) -> []
    with rules ( Exp :+= e )

  cps-lift-expression :
    e@Callback(_) -> []
    with rules ( Exp :+= e )

  cps-lift-expression :
    e@True() -> []
    with rules ( Exp :+= e )

  cps-lift-expression :
    e@False() -> []
    with rules ( Exp :+= e )

  cps-lift-expression :
    e@String(_) -> []
    with rules ( Exp :+= e )*/

  cps-lift-expression :
    e@Call(qid, e*) -> <concat> [stats, [VarDeclInferred(v, Call(qid, e2*))]]
    with v := <newname> "tmp"
       ; {| Exp
          : stats := <map(cps-lift-expression); concat> e*
          ; e2* := <bagof-Exp; reverse> // taking advantage of Exp ordering here, risky
          |}
       ; rules ( Exp :+= Var(v) )


  cps-lift-expression :
    e@EntityCons(qid, propval*) -> <concat> [stats, [VarDeclInferred(v, EntityCons(qid, propval2*))]]
    with v := <newname> "tmp"
       ; {| Exp
          : stats := <map(?PropVal(_, <id>); cps-lift-expression); concat> propval*
          ; propval2* := <bagof-Exp; reverse; <zip(\ (prop, val) -> PropVal(prop, val) \)> (<map(?PropVal(<id>, _))> propval*, <id>)> // taking advantage of Exp ordering here, risky
          |}
       ; rules ( Exp :+= Var(v) )
          
  cps-lift-expression :
    MethodCall(e, x, e*) -> <concat> [stats2, stats, [VarDeclInferred(v, MethodCall(e2, x, e2*))]]
    with v := <newname> "tmp"
       ; {| Exp
          : stats2 := <cps-lift-expression> e
          ; e2 := <Exp>
          |}
       ; {| Exp
          : stats := <map(cps-lift-expression); concat> e*
          ; e2* := <bagof-Exp; reverse> // taking advantage of Exp ordering here, risky
          |}
       ; rules ( Exp :+= Var(v) )

  cps-lift-expression :
    e@CollectionCons(gt, t, e*) -> <concat> [stats, [VarDeclInferred(v, CollectionCons(gt, t, e2*))]]
    where not(is-sync)
    with v := <newname> "tmp"
       ; {| Exp
          : stats := <map(cps-lift-expression); concat> e*
          ; e2* := <bagof-Exp; reverse> // taking advantage of Exp ordering here, risky
          |}
       ; rules ( Exp :+= Var(v) )

  cps-lift-expression :
    BinMethodCall(e1, op, e2) -> <concat> [stats1, stats2, [VarDeclInferred(v, BinMethodCall(e3, op, e4))]]
    with v := <newname> "tmp"
       ; {| Exp
          : stats1 := <cps-lift-expression> e1
          ; e3 := <Exp>
         |}
       ; {| Exp
          : stats2 := <cps-lift-expression> e2
          ; e4 := <Exp>
         |}
       ; rules ( Exp :+= Var(v) )

  cps-lift-expression :
    FieldAccess(e1, x) -> <concat> [stats1, [VarDeclInferred(v, FieldAccess(e2, x))]]
    with v := <newname> "tmp"
       ; {| Exp
          : stats1 := <cps-lift-expression> e1
          ; e2 := <Exp>
         |}
       ; rules ( Exp :+= Var(v) )

strategies
  
  is-sync = ?Int(_)
  is-sync = ?True()
  is-sync = ?Null()
  is-sync = ?False()
  is-sync = ?String(_)
  is-sync = ?Var(_)
  is-sync = ?Callback(_)
  
  is-sync =
    ?BinMethodCall(e1, _, e2)
    ; <is-sync> e1
    ; <is-sync> e2
  
  is-sync =
    ?FieldAccess(e, x)
    ; <is-sync> e

  is-sync =
    ?Call(qid, e*)
    ; ExternalSyncFunction(_, _, _, _) := <lookup-function> qid
    ; <map(is-sync)> e*

  is-sync =
    ?MethodCall(e, x, e*)
    ; where(<map(is-sync)> e*)
    ; <lookup-method> (<type-of> e, x)
    ; ?ExternalSyncMethod(_, _, _, _)

  is-sync =
    ?CollectionCons(_, _, e*)
    ; <map(is-sync)> e*
        
  is-sync =
    ?EntityCons(t, propval*)
    ; <map(?PropVal(_, <id>); is-sync)> propval*