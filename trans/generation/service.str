module generation/service

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/MoBL
  lib/editor-common
  desugar
  type
  rename
  util
  generation/emit
  generation/action
  generation/cps-lift
  generation/cps-action

rules

  definition-to-js :
    Service(_, qid, selem*) -> <emit> $[
      [<qid-to-js> qid] = {
        [body]
      };
      ]
    with body := <map(service-elem-to-js); separate-by(|",\n")> selem*

  service-elem-to-js :
    PropVal(x, e) -> $[[x]: [<expression-to-js> e]]

  service-elem-to-js :
    Resource(_, x, farg*, rt, prop*) ->
    $[[x]: function([fargs]) {
      var url = (this.root ? mobl.proxyUrl(this.root) : "") + [<expression-to-js> uri] + mobl.encodeUrlObj({[data]});
      $.ajax({
         url: url,
         datatype: [<expression-to-js> encoding],
         type: [<expression-to-js> method],
         error: function(_, message, error) {
           console.log(message);
           console.log(error);
           callback(null);
         },
         success: function(data) {
            [<expression-to-js> mapper](data, callback);
         }
      });
    }
   ]
  with fargs := <filter(farg-to-js); <concat> [<id>, ["callback"]]; separate-by(!", "); concat-strings> farg*
     ; <fetch(?PropVal("uri", uri)) <+ uri := String($["/[x]"])> prop*
     ; <fetch(?PropVal("encoding", encoding)) <+ encoding := String("\"json\"")> prop*
     ; <fetch(?PropVal("mapper", mapper)) <+ mapper := Var(QId("mobl", "dummyMapper"))> prop*
     ; <fetch(?PropVal("method", method)) <+ method := String("\"GET\"")> prop*
     ; data := <map(farg-to-js-key-val); separate-by(|", ")> farg*

  farg-to-js-key-val :
    FArg(x, _) -> $["[x]": [x]]

  farg-to-js-key-val :
    FArgOptional(x, _, _) -> $["[x]": [x]]
