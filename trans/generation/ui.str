module generation/ui

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/MoBL
  lib/editor-common
  desugar
  type
  generation/emit
  generation/action
  generation/lift
  generation/cps-action

rules

  definition-to-js :
    Template(qid, farg*, elems) -> <emit> $[
      mobl.rootScope.setLocal('[<qid-to-html> qid]', function([fargs]) {
        [init-stats]
        var [root] = $("<span>");
        [body] 
      });
      ]
    with {| InTemplate
		      : rules ( InTemplate := 1 )
		      ; root := <newname> "root"
          ; fargs :=  <filter(farg-to-js); <concat> [["scope"], <id>, ["namedArgs", "callback"]]; separate-by(!", "); concat-strings> farg*
		      ; body := <elems-to-js-callback(|root)> elems
		      ; init-stats := <fargs-to-init-js> farg*
		      |}

  definition-to-js :
    Screen(qid, farg*, rt, elems) -> <emit> $[
      mobl.rootScope.setLocal('[<qid-to-html> qid]', function([fargs]) {
        [init-stats]
        var [root] = $("<div>");
        [body] 
      });
      ]
    with {| InTemplate
          : rules ( InTemplate := 1 )
          ; root := <newname> "root"
          ; body := <elems-to-js-callback(|root)> elems
          ; fargs :=  <filter(farg-to-js); <concat> [["scope"], <id>, ["namedArgs", "callback", "screenCallback"]]; separate-by(!", "); concat-strings> farg*
          ; init-stats := <fargs-to-init-js> farg*
          |}

  elems-to-js-callback(|root) =
    <concat; elems-to-js(|root)> [<id>, [$[callback([root]); return;]]]

  elems-to-js(|root) :
    [TemplateCall(qid, arg*, prop*, elems)|rest*] -> 
    $[[body-stats]
      [templatecall]
]
    with elem-root := <newname> "root"
       ; subScope := <newname> "subScope"
       ; <debug(!"Still here")> qid
       ; if not([] := elems) then
           body-stats := $[var [subScope] = new mobl.LinkedMap(scope);
                           [subScope].setLocal('elements', function(scope, namedArgs, callback) {
                             var [elem-root] = $("<span>");
                             [<elems-to-js-callback(|elem-root)> elems]
                           });
]
         else
           body-stats := ""
         end
       ; if not([] := prop*) then
           props := <map(prop-to-bind)> prop*
           ; prop-set := $[
               var children = node.children();
               for(var i = 0; i < children.length; i++) {
                  var c = children.eq(i);
                  [props]
               }]
         else
           prop-set := ""
         end
       ; args  := <ref-arguments-to-js; debug(!"Got this from ref-argumets: "); <concat> [[<[] := elems; !"scope" <+ !subScope>], <id>, [
           $[function(node) {
               [prop-set]
               [root].append(node.contents());
               [<elems-to-js(|root)> rest*]
             }]
         ]]; separate-by(!", "); concat-strings> arg*
       ; templatecall := <concat-strings> ["(scope.get('", <qid-to-html> qid, "'))(", args, ");"]
  
 
  prop-to-bind :
    PropertyArg(x, e) -> $[c.bind('[x]', function(evt) {  evt.stopPropagation(); [<expression-to-js> e]; });]
  
  elems-to-js(|root) :
    [tg@Html(tag, arg*, elems, _)|rest*] -> $[
      var [node] = $("<[tag] [<escape> args]>");
      [<filter(databind-tag-arg-to-js(|tg, node)); concat-strings> arg*]
      [body]
    ]
    with args := <filter(tag-arg-to-html); separate-by(!" "); concat-strings> arg*
       ; node := <newname> "node"
       ; body := <elems-to-js(|node)> <concat> [elems, [
           $[[root].append([node]);
           [<elems-to-js(|root)> rest*]]]]

  elems-to-js(|root) :
    [f@Function(_, _, _, _)|rest*] -> $[
      [<function-to-js> f]
      [<elems-to-js(|root)> rest*]]

  elems-to-js(|root) :
    [f@SyncFunction(_, _, _, _)|rest*] -> $[
      [<function-to-js> f]
      [<elems-to-js(|root)> rest*]]

  elems-to-js(|root) :
    [s|rest*] -> $[[s][<elems-to-js(|root)> rest*]]
    where <is-string> s
    
  elems-to-js(|root) :
    [Init(init-stats)|rest*] -> <concat; cps-statements> [<cps-lift-expressions> init-stats, [<elems-to-js(|root)> rest*]]
  
  elems-to-js(|root) :
    [] -> ""
  
  tag-arg-to-html :
    HtmlArg(name, String(s)) -> $[[name]=[s]]

  databind-tag-arg-to-js(|tg, node) :
    HtmlArg(name, e) -> $[
      var [r] = [es];
      [node].attr('[name]', [r].get());
      [r].addEventListener('set', function(_, ref, val) {
        if(ref === [r]) { 
          [node].attr('[name]', val);
        } else {
          console.log("Garbage!");
        }
      });
      [r].rebind();
    ]
    where not(String(_) := e)
        ; not(SimpleType(QId("mobl", "Callback")) := <type-of> e)
    with es := <ref-expression-to-js> e
       ; r  := <newname> "ref"


  databind-tag-arg-to-js(|tg, node) :
    HtmlArg(name, e) -> $[
      [node].bind('[<string-replace(|"on", "")> name]', [es]);
    ]
    where SimpleType(QId("mobl", "Callback")) := <type-of> e
    with es := <expression-to-js> e

  databind-tag-arg-to-js(|tg, node) :
    HtmlDatabindArg(e) -> $[
      var [r] = [es];
      [node].[method]([r].get());
      [r].addEventListener('set', function(_, ref, val) {
        if(ref === [r]) { 
          [node].[method](val);
        } else {
          console.log("Garbage!");
        }
      });
      [r].rebind();
      [subs]
    ]
    where Html(tag, arg*, _, _) := tg
        ; [] := <filter(?HtmlArg("type", "\"checkbox\""))> arg*
    with es := <ref-expression-to-js> e
       ; r  := <newname> "ref"
       ; if "input" := tag then
           method := "val"
           ; subs := $[
               [node].change(function() {
                 [es].set([node].[method]());
               });
             ]
         else
           method := "text"
           ; subs := ""
         end

  databind-tag-arg-to-js(|tg, node) :
    HtmlDatabindArg(e) -> $[
      var [r] = [es];
      [node].attr('checked', !![r].get());
      [r].addSetListener(function(ref, val) {
        if(ref === [r]) [node].attr('checked', !!val);
      });
      [node].change(function() {
        [es].set(!![node].attr('checked'));
      });
    ]
    where Html("input", arg*, _, _) := tg
        ; not([] := <filter(?HtmlArg("type", "\"checkbox\""))> arg*)
    with es := <ref-expression-to-js> e
       ; r  := <newname> "ref"
    
  elems-to-js(|root) :
    [List(x, t, e, elems)|rest*] -> $[
      var [node] = $("<ul>");
      var [list] = [<expression-to-js> e];
      [root].append([node]);
      var [rest] = function() {
        [<elems-to-js(|root)> rest*]
      };
      var [renderList] = function(isRerender) {
	      [list].list(null, function(results) {
          [node].empty();
	        results = results.reverse();
	        function renderOne() {
	            var [x] = results.pop();
	            [<concat; elems-to-js(|node)> [elems, [$[
	              if(results.length > 0) {
	                renderOne();
	              } else if(!isRerender) {
	                [rest]();
	              }
	            ]]]]          
	        }
	        if(results.length > 0) {
	          renderOne();
	        } else if(!isRerender) {
	          [rest]();
	        }
	      });
      };
      [list].addEventListener($[$'add', 'remove'$]$, function() { [renderList](true); });
      [renderList](false);
    ]
    with node := <newname> "node"
       ; rest := <newname> "rest"
       ; i := <newname> "i"
       ; renderList := <newname> "renderList"
       ; list := <newname> "list"
       ; oldScope := <newname> "oldScope"
    
  elems-to-js(|root) :
    [ScreenString(s)|rest*] -> $[
      [root].append([s]);
      [<elems-to-js(|root)> rest*]]

  elems-to-js(|root) :
    [vd@VarDecl(x, t, e)|rest] -> <concat; elems-to-js(|root)> [<cps-lift-expressions> [vd], rest]
    where not(<is-sync> e)

  elems-to-js(|root) :
    [vd@VarDecl(x, t, e)|rest] -> $[
      var [x] = ref([<expression-to-js> e]);
      [<elems-to-js(|root)> rest]]
    where <is-sync> e

  elems-to-js(|root) :
    [vd@VarDeclInferred(x, e)|rest] -> <concat; elems-to-js(|root)> [<cps-lift-expressions> [vd], rest]
    where not(<is-sync> e)

  elems-to-js(|root) :
    [vd@VarDeclInferred(x, e)|rest] -> $[
      var [x] = ref([<expression-to-js> e]);
      [<elems-to-js(|root)> rest]]
    where <is-sync> e
    
  /*ref-expression-to-html :
    e -> $["[<ref-expression-to-js; html-escape> e]"]

  expression-to-html :
    e -> $["[<expression-to-js; html-escape> e]"]
  
  html-escape =
    string-replace(|"\"", "&quot;")*/

rules // utils
	
  qid-to-html :
    s -> s
    where is-string

  qid-to-html :
    QId(qid, x) -> $[[qids]__[x]]
    with qids := <qid-to-html> qid	