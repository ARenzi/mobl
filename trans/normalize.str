module normalize

imports include/MoBL

rules

  normalize-all =
    innermost(normalize)

  normalize :
    FunctionNoReturnType(manno*, name, farg*, stat*) -> Function(manno*, name, farg*, SimpleType(QId("mobl", "void")), stat*)

  normalize :
    SyncFunctionNoReturnType(manno*, name, farg*, stat*) -> SyncFunction(manno*, name, farg*, SimpleType(QId("mobl", "void")), stat*)

  normalize :
    IfNoElse(e, stat*) -> If(e, stat*, [])

  normalize :
    HtmlShort(tag, attr*) -> Html(tag, attr*, [], tag)

  normalize :
    EntityNoSuper(manno*, qid, prop*) -> Entity(manno*, qid, GenericType(QId("mobl", "Entity"), [SimpleType(qid)]), prop*)

  normalize :
    ExternalTypeNoSuper(manno*, qid, method*) -> ExternalType(manno*, qid, SimpleType(QId("mobl", "Object")), method*)

  normalize :
    TypeNoSuper(manno*, qid, def*) -> Type(manno*, qid, SimpleType(QId("mobl", "Object")), def*)

  normalize :
    PropertyNoAnnos(manno*, x, t) -> Property(manno*, x, t, [])

  normalize :
    ScreenNoReturnType(manno*, name, farg*, body) -> Screen(manno*, name, farg*, SimpleType(QId("mobl", "void")), body)

  normalize :
    ControlCallNoArgs(e, body) -> ControlCall(e, [], body)

  normalize :
    ControlCallNoBody(e, arg*) -> ControlCall(e, arg*, [])

  normalize :
    EntityNoSuper(manno*, qid, prop*) -> Entity(manno*, qid, GenericType(QId("mobl", "Entity"), [SimpleType(qid)]), prop*)

  normalize :
    TupleType(t*) -> GenericType(QId("mobl", $[Tuple[<length> t*]]), t*)

  normalize :
    ArrayType(t) -> GenericType(QId("mobl", "Array"), [t])

  normalize :
    FunctionType(t*, rt) -> GenericType(QId("mobl", $[Function[n]]), [t*, rt])
    where n := <length> t*