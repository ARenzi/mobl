module editor/editor

imports
  include/MoBL
  analyze
  mobl
  check
  desugar
  pp
  lib/editor-common

imports
  editor/resolve
  editor/complete
  editor/hover

rules

  // Analyzes the current program, returning a tuple with errors, warnings, and notes;
  // each a list of (term, message) tuples or simply (message) terms.
  editor-analyze:
    (ast, path, project-path) -> (ast2, errors, warnings, notes)
    with
      // Ensure all dynamic rules are properly scoped
      try(dr-scope-all-end)
      ; dr-scope-all-start
    with
      rules ( ProjectPath := project-path
              IsImported  : path
              OutputPath  := <concat-strings> [project-path, "/www"]
              ServerOutputPath  := <concat-strings> [project-path, "/server"]
              IncludePaths := [project-path, <concat-strings> [<plugin-path>, "/stdlib"]])
      ; ast2 := <analyze; store-result> ast
      ; (Module(mod-name, _) := ast2 <+ Application(mod-name, _, _) := ast2 <+ ServerApplication(mod-name, _, _) := ast2)
      ; rules ( CompilingModule := mod-name
                CompilingFilename := path )
      ; errors   := <collect-all(constraint-error, conc)> ast2
      ; if not([] := errors) then
          rules ( HasErrors := True() )
        end
      ; warnings := <collect-all(constraint-warning, conc)> ast2
      ; notes    := <collect-all(constraint-note, conc)> ast2

  // Prints the abstract syntax ATerm of a selection.
  generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := selected // we just return the input term

rules

  editor-desugar :
    (selected, position, ast, path, project-path) -> (filename, <desugar-all> ast2)
    with
            rules ( ProjectPath := project-path
              IsImported  : path
              OutputPath  := <concat-strings> [project-path, "/www"]
              ServerOutputPath  := <concat-strings> [project-path, "/server"]
              IncludePaths := [project-path, <concat-strings> [<plugin-path>, "/stdlib"]])
      ; ast2 := <analyze; store-result> ast
      ; filename := <guarantee-extension(|"aterm")> "desugared"

  format-code :
    (selected, position, ast, path, project-path) -> (filename, <pp-mobl> selected)
    with
      filename := <guarantee-extension(|"mobl")> "formatted"
