module editor/resolve

imports
  include/MoBL
  analyze
  mobl
  lib/editor-common
  lookup
  normalize
  declare
  rename
  generation/compile

rules

  editor-resolve:
    args@(SimpleType(_), position, ast, path, project-path) -> target
    where ast' := <analyze; store-result> ast
        ; position' := <desugar-position(normalize|ast)> position
    where t@SimpleType(qid) := <term-at-position(|position')> ast'
    where type     := <lookup-type> t
    where if QId(qid2, _) := qid; not(<origin-term> type) then
            <parse-file; externalize-module> <resolve-file> <concat-strings> [<qid-to-path> qid2, ".mobl"]
            ; <declare-all> Module(qid2, <id>)
            ; target := <lookup-type> t
          else
            target := type
          end


  editor-resolve:
    (Var(_), position, ast, path, project-path) -> target
    where ast' := <analyze; store-result> ast
        ; position' := <desugar-position(normalize|ast)> position
    where Var(x) := <term-at-position(|position')> ast'
    where target := <VarLookup> x

