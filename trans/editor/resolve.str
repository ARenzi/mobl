module editor/resolve

imports
  include/MoBL
  analyze
  mobl
  lib/editor-common
  lookup
  normalize
  declare
  type
  rename
  generation/compile

rules

  editor-resolve:
    (SimpleType(_), position, ast, path, project-path) -> target
    where ast' := <analyze; store-result> ast
        ; position' := <desugar-position(normalize|ast)> position
    where t@SimpleType(qid) := <term-at-position(|position')> ast'
    where target := <ensure-origin(lookup-type|qid)> t

  editor-resolve:
    (GenericType(_, _), position, ast, path, project-path) -> target
    where ast' := <analyze; store-result> ast
        ; position' := <desugar-position(normalize|ast)> position
    where t@GenericType(qid, _) := <term-at-position(|position')> ast'
    where target := <ensure-origin(lookup-type|qid)> t

  editor-resolve:
    (Call(_, _), position, ast, path, project-path) -> target
    where ast' := <analyze; store-result> ast
        ; position' := <desugar-position(normalize|ast)> position
    where Call(qid, _) := <term-at-position(|position')> ast'
    where target := <ensure-origin(lookup-function <+ lookup-screen|qid)> qid

  editor-resolve:
    (MethodCall(_, _, _), position, ast, path, project-path) -> target
    where ast' := <analyze; store-result> ast
        ; position' := <desugar-position(normalize|ast)> position
    where MethodCall(e, x, _) := <term-at-position(|position')> ast'
    where (   SimpleType(qid) := <type-of> e
           <+ GenericType(qid, _) := <type-of> e)
          ; ?t
    where target := <ensure-origin(lookup-method|qid)> (t, x)

  editor-resolve:
    (FieldAccess(_, _), position, ast, path, project-path) -> target
    where ast' := <analyze; store-result> ast
        ; position' := <desugar-position(normalize|ast)> position
    where FieldAccess(e, x) := <term-at-position(|position')> ast'
    where (   SimpleType(qid) := <type-of> e
           <+ GenericType(qid, _) := <type-of> e)
          ; ?t
    where target := <ensure-origin(lookup-property|qid)> (t, x)

  editor-resolve:
    (QId(_, _), position, ast, path, project-path) -> <editor-resolve> (parent, <cut-off-last-element> position, ast, path, project-path)
    where parent := <parent-at-position(|position)> ast

  cut-off-last-element :
    [_] -> []

  cut-off-last-element :
    [a|k] -> [a|<cut-off-last-element> k]

  // For actual variables
  editor-resolve:
    (Var(_), position, ast, path, project-path) -> target
    where ast' := <analyze; store-result> ast
        ; position' := <desugar-position(normalize|ast)> position
    where Var(x) := <term-at-position(|position')> ast'
    where target := <VarLookup> x

  // For controls
  editor-resolve:
    (Var(_), position, ast, path, project-path) -> target
    where ast' := <analyze; store-result> ast
        ; position' := <desugar-position(normalize|ast)> position
    where Var(qid) := <term-at-position(|position')> ast'
    where target := <ensure-origin(lookup-control|qid)> qid

  // For entities
  editor-resolve:
    (Var(_), position, ast, path, project-path) -> target
    where ast' := <analyze; store-result> ast
        ; position' := <desugar-position(normalize|ast)> position
    where Var(qid) := <term-at-position(|position')> ast'
    where target := <ensure-origin(lookup-type|qid)> SimpleType(qid)

  editor-resolve = debug(!"Editor resolve: "); fail

rules

  ensure-origin(lookup|qid) :
    node -> target
    where
      lookup-target := <lookup> node
      ; if QId(qid2, _) := qid; not(<origin-term> lookup-target) then
          <parse-file; externalize-module> <resolve-file> <concat-strings> [<qid-to-path> qid2, ".mobl"]
          ; <declare-all> Module(qid2, <id>)
          ; target := <lookup> node
        else
          target := lookup-target
        end
