module lookup

imports
  include/MoBL
  analyze
  declare
  resolve
  type
  mobl

strategies
  
  import-and-retry(s|qid2) =
    where(
      QId(qid, _) := qid2
      ; not(qid := <CompilingModule>)
      ; <lookup-import-module; alltd(declare)> Import(qid))
    ; s

  lookup-type =
       lookup-type-aux
     <+ ?SimpleType(qid)
        ; import-and-retry(lookup-type-aux|qid)
    
  lookup-type-aux :
    SimpleType(qid) -> <GetEntity> qid
  
  lookup-type-aux :
    SimpleType(qid) -> <GetType> qid
   
  lookup-type-aux :
    GenericType(qid, t*) -> ExternalType(manno*, <newname> "Generic", SimpleType(QId("mobl", "Object")), method2*)
    where ExternalGenericType(manno*, _, x*, method*) := <GetGenericType> qid
        ; {| RenameGenericType
           : <zip(\ (x, t) -> <id> where rules ( RenameGenericType : SimpleType(x) -> t ) \)> (x*, t*)
           ; method2* := <alltd(RenameGenericType)> method*
           |}
  
  lookup-property :
    (type, prop) -> t
    where decl := <lookup-type> type
          ; (ExternalType(_, _, super, member*) := decl <+ ExternalEntity(_, _, super, member*) := decl)
          ; <filter(?Property(_, prop, t, _))> member*
          ; if not(!t); not(SimpleType(QId("mobl", "Object")) := super) then
              t := <lookup-property> (super, prop)
            end
  
  get-all-properties :
    type -> props
    where c#([_, _, super, members]) := <lookup-type> type
        ; own-props := <filter(?Property(_, _, _, _))> members
        ; if not(SimpleType(QId("mobl", "Object")) := super) then
            props := <concat> [own-props, <get-all-properties> super]
          else
            props := own-props
          end

  lookup-template =
      lookup-template-aux
     <+ import-and-retry(lookup-template-aux|<id>)

  lookup-template-aux :
    qid -> ExternalTemplate(manno*, qid, farg2*)
    where <GetTemplate> qid
        ; ?ExternalTemplate(manno*, _, farg*)
        ; farg2* := <alltd(add-namespace)> farg*

  lookup-screen = 
      lookup-screen-aux
   <+ import-and-retry(lookup-screen-aux|<id>)

  lookup-screen-aux :
    qid -> ExternalScreen(manno*, qid, farg2*, rt)
    where <GetScreen> qid
        ; ?ExternalScreen(manno*, _, farg*, rt)
        ; farg2* := <alltd(add-namespace)> farg*

  lookup-function =
      lookup-function-aux
   <+ import-and-retry(lookup-function-aux|<id>)

  lookup-function-aux :
    qid -> ExternalFunction(manno*, qid, farg2*, rt2)
    where ExternalFunction(manno*, _, farg*, rt) := <GetFunction> qid
        ; rt2 := <alltd(add-namespace)> rt
        ; farg2* := <alltd(add-namespace)> farg*

  lookup-function-aux :
    qid -> ExternalSyncFunction(manno*, qid, farg2*, rt2)
    where ExternalSyncFunction(manno*, _, farg*, rt) := <GetFunction> qid
        ; rt2 := <alltd(add-namespace)> rt
        ; farg2* := <alltd(add-namespace)> farg*
   
  lookup-method :
    (t, x) -> ExternalSyncMethod(manno*, x, farg2*, rt2)
    where not(GenericType("Type", _) := t)
    where ExternalType(_, _, super, method*) := <lookup-type> t
        ; [ExternalSyncMethod(manno*, _, _, _)] := <filter(?ExternalSyncMethod(_, x, farg*, rt))> method*
        ; if not(!farg*); not(super := t) then // could not find a method
            <lookup-method> (super, x)
          end
        ; rt2 := <alltd(add-namespace)> rt
        ; farg2* := <alltd(add-namespace)> farg*

  lookup-method :
    (t, x) -> ExternalMethod(manno*, x, farg2*, rt2)
    where not(GenericType("Type", _) := t)
    where ExternalType(_, _, super, method*) := <lookup-type> t
        ; [ExternalMethod(manno*, _, _, _)] := <filter(?ExternalMethod(_, x, farg*, rt))> method*
        ; if not(!farg*); not(super := t) then // could not find a method
            <lookup-method> (super, x)
          end
        ; rt2 := <alltd(add-namespace)> rt
        ; farg2* := <alltd(add-namespace)> farg*

  lookup-method :
    (t2, x) -> ExternalMethod(manno*, x, farg2*, rt2)
    where GenericType("Type", [t@SimpleType(qid)]) := t2 // for static methods
    where ExternalType(_, _, super, method*) := <GetType <+ GetEntity; <lookup-type> GenericType(QId("mobl", "Entity"), [t])> qid
        ; [ExternalStaticMethod(manno*, _, _, _)] := <filter(?ExternalStaticMethod(_, x, farg*, rt))> method*
        ; if not(!farg*); not(super := t) then // could not find a method
            <lookup-method> (super, x)
          end
        ; rt2 := <alltd(add-namespace)> rt
        ; farg2* := <alltd(add-namespace)> farg*

  lookup-method :
    (t2, x) -> ExternalSyncMethod(manno*, x, farg2*, rt2)
    where GenericType("Type", [t@SimpleType(qid)]) := t2 // for static methods
    where ExternalType(_, _, super, method*) := <GetType <+ GetEntity; <lookup-type> GenericType(QId("mobl", "Entity"), [t])> qid
        ; [ExternalStaticSyncMethod(manno*, _, _, _)] := <filter(?ExternalStaticSyncMethod(_, x, farg*, rt))> method*
        ; if not(!farg*); not(super := t) then // could not find a method
            <lookup-method> (super, x)
          end
        ; rt2 := <alltd(add-namespace)> rt
        ; farg2* := <alltd(add-namespace)> farg*


  get-all-methods :
    type -> methods
    where not(GenericType("Type", [t@SimpleType(qid)]) := type) // for static methods
    where c#([_, _, super, members]) := <lookup-type> type
        ; own-methods := <filter(?ExternalMethod(_, _, _, _) <+ ?ExternalSyncMethod(_, _, _, _))> members
        ; if not(SimpleType(QId("mobl", "Object")) := super) then
            methods := <concat> [own-methods, <get-all-methods> super]
          else
            methods := own-methods
          end

  get-all-methods :
    type -> own-methods
    where GenericType("Type", [t@SimpleType(qid)]) := type // for static methods
    where c#([_, _, super, member*]) := <GetType <+ GetEntity; <lookup-type> GenericType(QId("mobl", "Entity"), [t])> qid
        ; own-methods := <filter(?ExternalStaticMethod(_, _, _, _) <+ ?ExternalStaticSyncMethod(_, _, _, _))> member*

  is-entity-type =
    lookup-type
    ; ?ExternalEntity(_, _, _, _)

  get-all-types =
    <concat> [<all-keys-GetEntity>, <all-keys-GetType>, <all-keys-GetGenericType>]