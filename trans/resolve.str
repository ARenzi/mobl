module resolve

imports
  libstratego-lib
  include/MoBL
  desugar
  lookup
  analyze
  type

strategies

  add-tl-namespace :
    Screen(x, farg*, rt, elem*) -> Screen(QId(<ModuleName>, x), farg*, rt, elem*)
    where <is-string> x
  
  add-tl-namespace :
    ScreenNoReturnType(x, farg*, elem*) -> ScreenNoReturnType(QId(<ModuleName>, x), farg*, elem*)
    where <is-string> x

  add-tl-namespace :
    Entity(x, super, prop*) -> Entity(QId(<ModuleName>, x), super, prop*)
    where <is-string> x

  add-tl-namespace :
    EntityNoSuper(x, prop*) -> EntityNoSuper(QId(<ModuleName>, x), prop*)
    where <is-string> x
    
  add-tl-namespace :
    ExternalFunction(x, farg*, rt) -> ExternalFunction(QId(<ModuleName>, x), farg*, rt)
    where <is-string> x

  add-tl-namespace :
    ExternalSyncFunction(x, farg*, rt) -> ExternalSyncFunction(QId(<ModuleName>, x), farg*, rt)
    where <is-string> x

  add-tl-namespace :
    Function(x, farg*, rt, stat*) -> Function(QId(<ModuleName>, x), farg*, rt, stat*)
    where <is-string> x

  add-tl-namespace :
    FunctionNoReturnType(x, farg*, stat*) -> FunctionNoReturnType(QId(<ModuleName>, x), farg*, stat*)
    where <is-string> x

  add-tl-namespace :
    SyncFunction(x, farg*, rt, stat*) -> SyncFunction(QId(<ModuleName>, x), farg*, rt, stat*)
    where <is-string> x

  add-tl-namespace :
    SyncFunctionNoReturnType(x, farg*, stat*) -> SyncFunctionNoReturnType(QId(<ModuleName>, x), farg*, stat*)
    where <is-string> x
  
  add-tl-namespace :
    ExternalGenericType(x, t*, method*) -> ExternalGenericType(QId(<ModuleName>, x), t*, method*)
    where <is-string> x
    
  add-tl-namespace :
    ExternalType(x, super, method*) -> ExternalType(QId(<ModuleName>, x), super, method*)
    where <is-string> x

  add-tl-namespace :
    ExternalTypeNoSuper(x, method*) -> ExternalTypeNoSuper(QId(<ModuleName>, x), method*)
    where <is-string> x
    
  add-tl-namespace :
    Template(x, farg*, elem*) -> Template(QId(<ModuleName>, x), farg*, elem*)
    where <is-string> x
    
rules
   
  add-namespace :
    SimpleType(qid) -> SimpleType(qid2)
    where not(lookup-type-aux)
        ; [qid2] := <filter({c, newid: ?c; <prefix-qid(|c)> qid; ?newid; <lookup-type-aux> SimpleType(<id>); !newid})> [<ModuleName>|<bagof-Imports>]

  // Add namespace to possible type references which look like vars
  add-namespace :
    Var(qid) -> Var(qid2)
    where <is-string> qid
    where not(<lookup-type-aux> SimpleType(qid))
        ; [qid2] := <filter({c, newid: ?c; <prefix-qid(|c)> qid; ?newid; <lookup-type-aux> SimpleType(<id>); !newid})> [<ModuleName>|<bagof-Imports>]

  add-namespace :
    GenericType(qid, t*) -> GenericType(qid2, t2*)
    where not(lookup-type-aux)
        ; [qid2] := <filter({c, newid: ?c; <prefix-qid(|c)> qid; ?newid; <lookup-type-aux> GenericType(<id>, t*); !newid})> [<ModuleName>|<bagof-Imports>]
        ; t2* := <alltd(add-namespace)> t*
    
  add-namespace :
    TemplateCall(qid, arg*, elem*) -> TemplateCall(qid2, arg2*, elem2*)
    where not(<lookup-template-aux> (qid, arg*))
        ; [qid2] := <filter({c, newid: ?c; <prefix-qid(|c)> qid; ?newid; lookup-template-aux; !newid})> [<ModuleName>|<bagof-Imports>]
        ; arg2*  := <alltd(add-namespace)> arg*
        ; elem2* := <alltd(add-namespace)> elem*

  add-namespace :
    TemplateCallNoBody(qid, arg*) -> TemplateCallNoBody(qid2, arg2*)
    where not(<lookup-template-aux> (qid, arg*))
        ; [qid2] := <filter({c, newid: ?c; <prefix-qid(|c)> qid; ?newid; lookup-template-aux; !newid})> [<ModuleName>|<bagof-Imports>]
        ; arg2*  := <alltd(add-namespace)> arg*

  add-namespace :
    TemplateCallNoArgs(qid, elem*) -> TemplateCallNoArgs(qid2, elem2*)
    where not(<lookup-template-aux> (qid, []))
        ; [qid2] := <filter({c, newid: ?c; <prefix-qid(|c)> qid; ?newid; lookup-template-aux; !newid})> [<ModuleName>|<bagof-Imports>]
        ; elem2* := <alltd(add-namespace)> elem*

  add-namespace :
    TemplateCallNoArgsNoBody(qid) -> TemplateCallNoArgsNoBody(qid2)
    where not(<lookup-template-aux> (qid, []))
        ; [qid2] := <filter({c, newid: ?c; <prefix-qid(|c)> qid; ?newid; lookup-template-aux; !newid})> [<ModuleName>|<bagof-Imports>]

  add-namespace :
    Call(qid, e*) -> Call(qid2, e2*)
    where arg-types := <map(type-of)> e*
        ; not(<lookup-function-aux> (qid, arg-types))
        ; [qid2] := <filter({c, newid: ?c; <prefix-qid(|c)> qid; ?newid; lookup-function-aux; !newid})> [<ModuleName>|<bagof-Imports>]
        ; e2* := <alltd(add-namespace)> e*

  add-namespace :
    Call(qid, e*) -> Call(qid2, e2*)
    where arg-types := <map(type-of)> e*
        ; not(<lookup-screen-aux> (qid, arg-types))
        ; [qid2] := <filter({c, newid: ?c; <prefix-qid(|c)> qid; ?newid; lookup-screen-aux; !newid})> [<ModuleName>|<bagof-Imports>]
        ; e2* := <alltd(add-namespace)> e*

  prefix-qid(|qid) :
    qid2 -> QId(qid, qid2)
    where is-string

  prefix-qid(|qid) :
    QId(q, x) -> QId(<prefix-qid(|qid)> q, x)
