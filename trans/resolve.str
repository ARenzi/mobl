module resolve

imports
  libstratego-lib
  include/MoBL
  lookup
  analyze
  type

strategies

  add-tl-namespace :
    Screen(manno*, x, farg*, rt, elem*) -> Screen(manno*, QId(<ModuleName>, x), farg*, rt, elem*)
    where <is-string> x

  add-tl-namespace :
    ExternalScreen(manno*, x, farg*, rt) -> ExternalScreen(manno*, QId(<ModuleName>, x), farg*, rt)
    where <is-string> x

  add-tl-namespace :
    Entity(manno*, x, super, prop*) -> Entity(manno*, QId(<ModuleName>, x), super, prop*)
    where <is-string> x

  add-tl-namespace :
    ExternalEntity(manno*, x, super, prop*) -> ExternalEntity(manno*, QId(<ModuleName>, x), super, prop*)
    where <is-string> x

  add-tl-namespace :
    ExternalFunction(manno*, x, farg*, rt) -> ExternalFunction(manno*, QId(<ModuleName>, x), farg*, rt)
    where <is-string> x

  add-tl-namespace :
    ExternalSyncFunction(manno*, x, farg*, rt) -> ExternalSyncFunction(manno*, QId(<ModuleName>, x), farg*, rt)
    where <is-string> x

  add-tl-namespace :
    Function(manno*, x, farg*, rt, stat*) -> Function(manno*, QId(<ModuleName>, x), farg*, rt, stat*)
    where <is-string> x

  add-tl-namespace :
    SyncFunction(manno*, x, farg*, rt, stat*) -> SyncFunction(manno*, QId(<ModuleName>, x), farg*, rt, stat*)
    where <is-string> x

  add-tl-namespace :
    ExternalGenericType(manno*, x, t*, method*) -> ExternalGenericType(manno*, QId(<ModuleName>, x), t*, method*)
    where <is-string> x

  add-tl-namespace :
    ExternalType(manno*, x, super, method*) -> ExternalType(manno*, QId(<ModuleName>, x), super, method*)
    where <is-string> x

  add-tl-namespace :
    Template(manno*, x, farg*, elem*) -> Template(manno*, QId(<ModuleName>, x), farg*, elem*)
    where <is-string> x

  add-tl-namespace :
    ExternalTemplate(manno*, x, farg*) -> ExternalTemplate(manno*, QId(<ModuleName>, x), farg*)
    where <is-string> x

rules

  add-namespace-all =
    alltd(add-namespace)

  add-namespace :
    SimpleType(qid) -> SimpleType(qid2)
    where not(lookup-type-aux)
        ; [qid2] := <filter({c, newid: ?c; <prefix-qid(|c)> qid; ?newid; <lookup-type-aux> SimpleType(<id>); !newid})> [<ModuleName>|<bagof-Imports>]

  // Add namespace to possible type references which look like vars
  add-namespace :
    Var(qid) -> Var(qid2)
    where <is-string> qid
    where not(<lookup-type-aux> SimpleType(qid))
        ; [qid2] := <filter({c, newid: ?c; <prefix-qid(|c)> qid; ?newid; <lookup-type-aux> SimpleType(<id>); !newid})> [<ModuleName>|<bagof-Imports>]

  add-namespace :
    Var(qid{}) -> Var(qid2)
    where <is-string> qid
    where not(<lookup-template-aux> qid)
        ; [qid2] := <filter({c, newid: ?c; <prefix-qid(|c)> qid; ?newid; lookup-template-aux; !newid})> [<ModuleName>|<bagof-Imports>]

  add-namespace :
    GenericType(qid, t*) -> GenericType(qid2, t2*)
    where not(lookup-type-aux)
        ; [qid2] := <filter({c, newid: ?c; <prefix-qid(|c)> qid; ?newid; <lookup-type-aux> GenericType(<id>, t*); !newid})> [<ModuleName>|<bagof-Imports>]
        ; t2* := <alltd(add-namespace)> t*

  add-namespace :
    Call(qid, e*) -> Call(qid2, e2*)
    where not(<lookup-function-aux> qid)
        ; [qid2] := <filter({c, newid: ?c; <prefix-qid(|c)> qid; ?newid; lookup-function-aux; !newid})> [<ModuleName>|<bagof-Imports>]
        ; e2* := <alltd(add-namespace)> e*

  add-namespace :
    Call(qid, e*) -> Call(qid2, e2*)
    where not(<lookup-screen-aux> qid)
        ; [qid2] := <filter({c, newid: ?c; <prefix-qid(|c)> qid; ?newid; lookup-screen-aux; !newid})> [<ModuleName>|<bagof-Imports>]
        ; e2* := <alltd(add-namespace)> e*

  prefix-qid(|qid) :
    qid2 -> QId(qid, qid2)
    where is-string

  prefix-qid(|qid) :
    QId(q, x) -> QId(<prefix-qid(|qid)> q, x)
