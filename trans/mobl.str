module mobl

/**
 * This module mostly imports all other modules and deals with the IDE
 * side of things
 */

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/MoBL
  lib/editor-common
  check
  generation/compile
  generation/emit
  generation/compile
  desugar
  lookup
  resolve
  analyze

rules // Main editor interface (defined by editor/MoBL-Builders and -References.esv)
  
  // Analyzes the current program, returning a tuple with errors, warnings, and notes;
  // each a list of (term, message) tuples or simply (message) terms.
  editor-analyze:
    (ast, path, project-path) -> (errors, warnings, notes)
    with
      // Ensure all dynamic rules are properly scoped
      try(dr-scope-all-end)
      ; dr-scope-all-start
    with
      rules ( ProjectPath := project-path
              IsImported  : path
              OutputPath  := <concat-strings> [project-path, "/www"] )
      ; ast2 := <analyze; store-result> ast
      ; (Module(mod-name, _) := ast2 <+ Application(mod-name, _, _) := ast2)
      ; rules ( CompilingModule := mod-name )
      ; errors   := <collect-all(constraint-error, conc)> ast2
      ; warnings := <collect-all(constraint-warning, conc)> ast2
      ; notes    := <collect-all(constraint-note, conc)> ast2
    
  // Prints the abstract syntax ATerm of a selection.
  generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := selected // we just return the input term
  
  // Resolves a reference when the user control-clicks or presses F3 in the editor.
  // Only succeeds for nodes of the form Type(_) for which GetEntity is defined.
  editor-resolve:
    (node, position, ast, path, project-path) -> target
    where
      //<debug(!"Resolve: ")> node; 
      target     := <lookup-type> node

  generate-artifacts:
    (selected, position, ast, path, project-path) -> None() //(filename-html, result-html)
    with
      // Ensure all dynamic rules are properly scoped
      try(dr-scope-all-end)
      ; dr-scope-all-start
    with
      rules ( ProjectPath := project-path 
              IsImported  : path
              OutputPath  := <concat-strings> [project-path, "/www"])
      ; (Module(mod-name, _) := ast <+ Application(mod-name, _, _) := ast)
      ; rules ( CompilingModule := mod-name )
      ; <compile> ast

  // Returns "hover help" information for a particular node in the editor.
  // For references, this rule is invoked using the resolved term.
  editor-hover:
    (target, position, ast, path, project-path) -> $[Hover help: [<write-to-string> t2]]
    where t2 := <lookup-node> position

  // Completes an identifier when the user presses control-space
  // (the completion identifier in the AST provides additional context information)
  editor-complete:
    (SimpleType(COMPLETION(prefix)), position, ast, path, project-path) ->
    proposals
    where
      all-types := <get-all-types>;
      proposals    := <map(type-name-to-proposal)> all-types

  type-name-to-proposal:
    x -> ([x], "")

strategies

  store-result =
    ?t
    ; rules ( ResultingAST := t )

  
  lookup-node :
    path -> <find-node> (path, <ResultingAST>)
                
  find-node :
    ([], t) -> t
  
  find-node :
    ([a|k], c#(ts)) -> <find-node> (k, <at-index(?result); !result> (a, ts)) 

