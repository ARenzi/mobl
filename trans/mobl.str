module mobl

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/MoBL
  lib/editor-common
  check
  generation/html
  generation/javascript
  lookup

rules // Main editor interface (defined by editor/MoBL-Builders and -References.esv)
  
  // Analyzes the current program, returning a tuple with errors, warnings, and notes;
  // each a list of (term, message) tuples or simply (message) terms.
  editor-analyze:
    (ast, path, project-path) -> (errors, warnings, notes)
    with
      // Ensure all dynamic rules are properly scoped
      try(dr-scope-all-end);
      dr-scope-all-start
    with
      analyze; 
      errors   := <collect-all(constraint-error, conc)> ast;
      warnings := <collect-all(constraint-warning, conc)> ast;
      notes    := <collect-all(constraint-note, conc)> ast
    
  // Prints the abstract syntax ATerm of a selection.
  generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := selected // we just return the input term
  
  // Resolves a reference when the user control-clicks or presses F3 in the editor.
  // Only succeeds for nodes of the form Type(_) for which GetEntity is defined.
  editor-resolve:
    (node, position, ast, path, project-path) -> target
    where
      <debug(!"Resolve: ")> node; 
      target     := <lookup-type> node

  // Returns "hover help" information for a particular node in the editor.
  // For references, this rule is invoked using the resolved term.
  editor-hover:
    (target, position, ast, path, project-path) -> $[Hover help: [<write-to-string> t2]]
    where t2 := <lookup-node> position

  // Completes an identifier when the user presses control-space
  // (the completion identifier in the AST provides additional context information)
  editor-complete:
    (SimpleType(COMPLETION(prefix)), position, ast, path, project-path) ->
    proposals
    where
      all-types := <get-all-types>;
      proposals    := <map(type-name-to-proposal)> all-types

  type-name-to-proposal:
    x -> ([x], "")
