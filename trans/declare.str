module declare

imports
  include/MoBL
  desugar

strategies

  declare-all =
    with(
      (?Module(_, def*) <+ ?Application(_, _, def*))
      ; <filter(declare)> def*
    )
      
  // Records the definition of an entity in a dynamic rule GetEntity.
  declare:
    Entity(_, qid, super, body) -> <fail>
    with
      extern := <definition-to-external>
      ; rules(
          GetEntity : qid -> extern
        )

  declare:
    EntityNoSuper(_, qid, body) -> <fail>
    with
      extern := <definition-to-external>
      ; rules(
          GetEntity : qid -> extern
        )

  declare:
    extern@ExternalType(manno*, qid, super, method*) -> <fail>
    with method2* := <alltd(desugar)> method*
        ; rules (
           GetType : qid -> ExternalType(manno*, qid, super, method2*)
         )

  declare:
    ExternalTypeNoSuper(_, qid, method*) -> <fail>
    with extern := <innermost(desugar)> 
       ; rules (
           GetType : qid -> extern
         )

  declare:
    extern@ExternalGenericType(manno*, qid, arg*, method*) -> <fail>
    with method2* := <alltd(desugar)> method*
         ; rules (
             GetGenericType : qid -> ExternalGenericType(manno*, qid, arg*, method2*)
           )

  declare:
    extern@ExternalEntity(manno*, qid, super, prop*) -> <fail>
    with rules (
             GetEntity : qid -> extern
           )

  declare:
    extern@ExternalFunction(manno*, qid, farg*, rt) -> <fail>
    with rules (
           GetFunction : qid -> extern 
         )

  declare:
    extern@ExternalSyncFunction(manno*, qid, farg*, rt) -> <fail>
    with rules (
           GetFunction : qid -> extern
         )

  declare:
    Function(manno*, qid, farg*, rt, body) -> <fail>
    with
      extern := <definition-to-external>
      ; rules (
          GetFunction : qid -> extern 
        )
 
  declare:
    FunctionNoReturnType(manno*, qid, farg*, body) -> <fail>
    with
      extern := <definition-to-external>
      ; rules (
          GetFunction : qid -> extern 
        )

  declare:
    SyncFunction(manno*, qid, farg*, rt, body) -> <fail>
    with
      extern := <definition-to-external>
      ; rules (
          GetFunction : qid -> extern
        )

  declare:
    SyncFunctionNoReturnType(manno*, qid, farg*, body) -> <fail>
    with
      extern := <definition-to-external>
      ; rules (
          GetFunction : qid -> extern 
        )
        
	declare:
	  Template(manno*, qid, farg*, body) -> <fail>
	  with
      extern := <definition-to-external>
	    ; rules (
	        GetTemplate : qid -> extern 
	      )

  declare:
    extern@ExternalTemplate(manno*, qid, farg*) -> <fail>
    with rules (
           GetTemplate : qid -> extern 
         )
	
	declare :
	  Screen(manno*, qid, farg*, rt, body) -> <fail>
	  with
	    extern := <definition-to-external>
	    ; rules (
	        GetScreen : qid -> extern
	      )

  declare:
    extern@ExternalScreen(manno*, qid, farg*, rt) -> <fail>
    with rules (
           GetScreen : qid -> extern 
         )

  declare :
    ScreenNoReturnType(manno*, qid, farg*, body) -> <fail>
    with
      extern := <definition-to-external>
      ; rules (
          GetScreen : qid -> extern
        )

strategies // convert to externals
  
  definition-to-external :
    Entity(manno*, qid, super, prop*) -> ExternalEntity(manno*, qid, super, <alltd(desugar)> prop*)

  definition-to-external :
    EntityNoSuper(manno*, qid, prop*) -> ExternalEntity(manno*, qid, GenericType(QId("mobl", "Entity"), [SimpleType(qid)]), <alltd(desugar)> prop*)
  
  definition-to-external :
    Function(manno*, qid, farg*, rt, stat*) -> ExternalFunction(manno*, qid, farg*, rt)
  
  definition-to-external :
    FunctionNoReturnType(manno*, qid, farg*, stat*) -> ExternalFunction(manno*, qid, farg*, SimpleType(QId("mobl", "void")))

  definition-to-external :
    SyncFunction(manno*, qid, farg*, rt, stat*) -> ExternalSyncFunction(manno*, qid, farg*, rt)
  
  definition-to-external :
    SyncFunctionNoReturnType(manno*, qid, farg*, stat*) -> ExternalSyncFunction(manno*, qid, farg*, SimpleType(QId("mobl", "void")))
  
  definition-to-external :
    Template(manno*, qid, farg*, elem*) -> ExternalTemplate(manno*, qid, farg*)

  definition-to-external :
    Screen(manno*, qid, farg*, rt, _) -> ExternalScreen(manno*, qid, farg*, rt)

  definition-to-external :
    ScreenNoReturnType(manno*, qid, farg*, _) -> ExternalScreen(manno*, qid, farg*, SimpleType(QId("mobl", "void")))

  definition-to-external :
    Import(s) -> Import(s)

  definition-to-external =
    ?c#(_)
    ; where(<string-starts-with(|"External")> c)
    ; try(desugar)