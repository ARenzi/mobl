module declare

imports
  include/MoBL
  normalize
  lib/editor-common

strategies

  declare-all =
    with(
      (?Module(_, def*) <+ ?Application(_, _, def*))
      ; <filter(origin-track-forced(declare))> def*
    )

  // Records the definition of an entity in a dynamic rule GetEntity.
  declare:
    Entity(_, qid, super, body) -> <fail>
    with
      extern := <origin-track-forced(definition-to-external)>
      ; rules(
          GetEntity : qid -> extern
        )

  declare:
    extern@ExternalType(manno*, qid, super, method*) -> <fail>
    with rules (
           GetType : qid -> extern
         )

  declare:
    extern@ExternalGenericType(manno*, qid, arg*, method*) -> <fail>
    with rules (
           GetGenericType : qid -> extern
         )

  declare:
    extern@ExternalEntity(manno*, qid, super, prop*) -> <fail>
    with rules (
             GetEntity : qid -> extern
           )

  declare:
    extern@ExternalFunction(manno*, qid, farg*, rt) -> <fail>
    with rules (
           GetFunction : qid -> extern
         )

  declare:
    extern@ExternalSyncFunction(manno*, qid, farg*, rt) -> <fail>
    with rules (
           GetFunction : qid -> extern
         )

  declare:
    Function(manno*, qid, farg*, rt, body) -> <fail>
    with
      extern := <origin-track-forced(definition-to-external)>
      ; rules (
          GetFunction : qid -> extern
        )

  declare:
    SyncFunction(manno*, qid, farg*, rt, body) -> <fail>
    with
      extern := <origin-track-forced(definition-to-external)>
      ; rules (
          GetFunction : qid -> extern
        )

  declare:
    Control(manno*, qid, farg*, body) -> <fail>
    with
      extern := <origin-track-forced(definition-to-external)>
      ; rules (
          GetControl : qid -> extern
        )

  declare:
    extern@ExternalControl(manno*, qid, farg*) -> <fail>
    with rules (
           GetControl : qid -> extern
         )

  declare :
    Screen(manno*, qid, farg*, rt, body) -> <fail>
    with
      extern := <origin-track-forced(definition-to-external)>
      ; rules (
          GetScreen : qid -> extern
        )

  declare:
    extern@ExternalScreen(manno*, qid, farg*, rt) -> <fail>
    with rules (
           GetScreen : qid -> extern
         )

  declare :
    Service(manno*, qid, selem*) -> <fail>
    with
      extern := <origin-track-forced(definition-to-external)>
      ; rules (
          GetType : qid -> extern
        )


strategies // convert to externals

  definition-to-external :
    Entity(manno*, qid, super, prop*) -> ExternalEntity(manno*, qid, super, prop*)

  definition-to-external :
    Function(manno*, qid, farg*, rt, stat*) -> ExternalFunction(manno*, qid, farg*, rt)

  definition-to-external :
    SyncFunction(manno*, qid, farg*, rt, stat*) -> ExternalSyncFunction(manno*, qid, farg*, rt)

  definition-to-external :
    Control(manno*, qid, farg*, elem*) -> ExternalControl(manno*, qid, farg*)

  definition-to-external :
    Screen(manno*, qid, farg*, rt, _) -> ExternalScreen(manno*, qid, farg*, rt)

  definition-to-external :
    Service(manno*, qid, selem*) -> ExternalType(manno*, qid, SimpleType(QId("mobl", "Object")), <filter(service-elem-to-external)> selem*)

  // For signatures we turn a webservice into an external type and resources into external methods
  service-elem-to-external :
    Resource(manno*, qid, farg*, rt, _) -> ExternalStaticMethod(manno*, qid, farg*, rt)

  definition-to-external :
    Import(s) -> Import(s)

  definition-to-external =
    ?c#(_)
    ; where(<string-starts-with(|"External")> c)