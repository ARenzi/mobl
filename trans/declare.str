module declare

imports
  include/MoBL

strategies

  // Records the definition of an entity in a dynamic rule GetEntity.
  declare:
    Entity(x, body) -> <fail>
    with
      extern := <definition-to-external>
      ; rules(
          GetEntity : x -> extern
        )

  declare:
    ExternalType(qid) -> <fail>
    with
      extern := <definition-to-external>
      ; rules (
          GetType : qid -> extern
        )

  declare:
    ExternalGenericType(qid, arg*) -> <fail>
    with
      extern := <definition-to-external>
      ; arity := <length> arg*
      ; rules (
          GetGenericType : (qid, arity) -> extern
        )
        
  declare:
    TemplateNoRequires(qid, farg*, body) -> <fail>
    with
      extern := <definition-to-external>
      ; arg-types := <map(?FArg(_, <id>))> farg*
      ; rules (
          GetTemplate : (qid, arg-types) -> extern 
        )

	declare:
	  Template(qid, farg*, req*, body) -> <fail>
	  with
      extern := <definition-to-external>
      ; arg-types := <map(?FArg(_, <id>))> farg*
	    ; rules (
	        GetTemplate : (qid, arg-types) -> extern 
	      )

strategies // convert to externals
  
  definition-to-external :
    Entity(qid, body) -> ExternalEntity(qid, body)
  
  definition-to-external :
    Function(qid, farg*, rt, stat*) -> ExternalFunction(qid, farg*, rt)
  
  definition-to-external :
    FunctionNoReturnType(qid, farg*, stat*) -> ExternalFunction(qid, farg*, SimpleType("void"))
  
  definition-to-external :
    Template(qid, farg*, req*, elem*) -> ExternalTemplate(qid, farg*, req*)

  definition-to-external :
    TemplateNoRequires(qid, farg*, elem*) -> ExternalTemplate(qid, farg*, [])

  definition-to-external =
    ?c#(_)
    ; where(<string-starts-with(|"External")> c)