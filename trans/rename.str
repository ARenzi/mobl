module rename

imports
  include/MoBL
  declare
  type

strategies
  
  rename-all = alltd(rename)
  
  rename-var : 
   (x, t) -> y
   with y := x{<newname> x}//; <debug(!"New name: ")> Var(y)
      ; rules(
           RenameId : x -> y
           TypeOf   : y -> t
        )

  rename-local-function : 
   c#([mannos, name|rest]) -> name2
   where "template" := <RenameScope>
   with name2 := <rename-var> (name, SimpleType(QId("mobl", "Callback")))
      ; rules(
           RenameFunction : name -> name2
        )
      ; <try(declare)> c#([mannos, name2|rest])
        
  rename-local-function :
    c#([_, name|rest]) -> name
    where not("template" := <RenameScope>)
  
  rename-ref-var :
   (x, t) -> y
   with y := <rename-var>
      ; rules(
           IsRefVar : y
        )
      /*; if SimpleType(QId("mobl", "Template")) := t then
          rules ( IsTemplateArgument : y
                  RenameTemplate     : x -> y )
        end*/   
  
  is-ref :
    y -> <IsRefVar> y
  
  is-ref :
    Var(y) -> <IsRefVar> y
  
  rename :
    Var(x) -> Var(<RenameId> x)

  rename :
    Assignment(x, e) -> Assignment(<RenameId> x, <rename-all> e)
    
  rename :
    Call(x, e*) -> Call(<RenameFunction> x, <rename-all> e*)

  /*rename :
    c#([Var(qid)|rest]) -> c#([Var(<RenameTemplate> qid)|<rename-all> rest])
    where <string-starts-with(|"TemplateCall")> c*/
    
  rename-scope(s) =
    {| RenameId, RenameFunction//, RenameTemplate
     : s
     |}

  template-scope(s) =
    {| RenameScope
     : rules ( RenameScope := "template" )
     ; rename-scope(s)
     |}

  action-scope(s) =
    {| RenameScope
     : rules ( RenameScope := "action" )
     ; rename-scope(s)
     |}
  
  rename :
    ExternalGenericType(manno*, qid, x*, method*) -> ExternalGenericType(manno*, qid, x*, method2*)
    with {| RenameType
          : <map(\ x -> x where rules ( RenameType : SimpleType(x) -> SimpleType(x){"TemplateType"} ) \)> x*
          ; method2* := <rename-all> method*
          |}

  rename = RenameType

  rename :
    Template(manno*, qid, farg*, body) -> Template(manno*, qid, farg2*, body2)
    where not("template" := <RenameScope>)
    with template-scope(
           farg2* := <map(rename-ref-farg)> farg*
           //; <rename-var> ("elements", SimpleType(QId("mobl", "Template")))
           ; body2 := <rename-all> body
         )

  // Local template definitions
  rename :
    Template(manno*, name, farg*, body) -> <try(declare)> Template(manno*, name2, farg2*, body2)
    where "template" := <RenameScope>
    with template-scope( 
           farg2* := <map(rename-ref-farg)> farg*
           ; body2 := <rename-all> body
         )
       ; name2 := <rename-var> (name, SimpleType(QId("mobl", "Template")))

  rename-ref-farg :
    FArg(x, t) -> FArg(<rename-ref-var> (x, t), t)    

  rename-ref-farg :
    FArgOptional(x, t, e) -> FArgOptional(<rename-ref-var> (x, t), t, <rename-all> e)

  rename-farg :
    FArg(x, t) -> FArg(<rename-var> (x, t), t)    

  rename-farg :
    FArgOptional(x, t, e) -> FArg(<rename-var> (x, t), t)    

  rename :
    Screen(manno*, name, arg*, rt, body) -> Screen(manno*, name, arg2*, rt, body2)
    with template-scope( 
           arg2* := <map(rename-ref-farg)> arg*
           ; body2 := <rename-all> body
         )

  rename :
    ScreenNoReturnType(manno*, name, farg*, body) -> ScreenNoReturnType(manno*, name, farg2*, body2)
    with template-scope( 
           farg2* := <map(rename-ref-farg)> farg*
           ; body2 := <rename-all> body
         )

strategies
  
  rename :
    f@Function(manno*, qid, farg*, rt, body) -> Function(manno*, qid2, farg2*, rt, body2)
    with action-scope( 
           farg2* := <map(rename-farg)> farg*
           ; body2 := <rename-all> body
         )
         ; qid2 := <rename-local-function> f

  rename :
    f@FunctionNoReturnType(manno*, qid, farg*, body) -> FunctionNoReturnType(manno*, qid2, farg2*, body2)
    with action-scope( 
           farg2* := <map(rename-farg)> farg*
           ; body2 := <rename-all> body
         )
         ; qid2 := <rename-local-function> f

  rename :
    f@SyncFunction(manno*, qid, farg*, rt, body) -> SyncFunction(manno*, qid2, farg2*, rt, body2)
    with action-scope( 
           farg2* := <map(rename-farg)> farg*
           ; body2 := <rename-all> body
         )
         ; qid2 := <rename-local-function> f

  rename :
    f@SyncFunctionNoReturnType(manno*, qid, farg*, body) -> SyncFunctionNoReturnType(manno*, qid2, farg2*, body2)
    with action-scope( 
           farg2* := <map(rename-farg)> farg*
           ; body2 := <rename-all> body
         )
         ; qid2 := <rename-local-function> f
  
  rename :
    Init(body) -> Init(body2)
    with action-scope(body2 := <rename-all> body)

  rename :
    Callback(body) -> Callback(body2)
    with action-scope(body2 := <rename-all> body)

  rename :
    AnonymousTemplate(body) -> AnonymousTemplate(body2)
    with template-scope(body2 := <rename-all> body)

strategies
  
  rename :
    VarDecl(name, t, e) -> VarDecl(<rename-var> (name, t), t, <rename-all> e)
    where "action" := <RenameScope>

  rename :
    VarDecl(name, t, e) -> VarDecl(<rename-ref-var> (name, t), t, <rename-all> e)
    where "template" := <RenameScope>

  rename :
    VarDeclInferred(name, e) -> VarDeclInferred(<rename-var> (name, <type-of> e), <rename-all> e)
    where "action" := <RenameScope>

  rename :
    VarDeclInferred(name, e) -> VarDeclInferred(<rename-ref-var> (name, <type-of> e), <rename-all> e)
    where "template" := <RenameScope>
   
  rename :
    List(x, t, e, body) -> List(x2, t, e2, body2)
    with rename-scope(
           x2 := <rename-var> (x, t)
           ; e2 := <rename-all> e
           ; body2 := <rename-all> body
         )

  rename :
    For(x, t, e, stat*) -> For(x2, t, e2, stat2*)
    with rename-scope(
           x2 := <rename-var> (x, t)
           ; e2 := <rename-all> e
           ; stat2* := <rename-all> stat*
         )