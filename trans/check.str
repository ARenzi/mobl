module check

imports
  include/MoBL
  lookup
  type
  rename
  desugar
  mobl
  pp
  generation/compile

rules

  constraint-error :
    Application(qid, _, def*) -> (qid, $[No 'root' screen defined with no arguments. The root screen functions as the application's entry point and is required.])
    where [] := <filter(?Screen(_, QId(qid, "root"), [], _, _))> def*

rules

  constraint-error :
    t@SimpleType(_) -> (t, $[Type is not defined: [<pp-mobl-type> t]])
    where not(<lookup-type> t) // no entity for this type
        ; not(_{"ControlType"} := t)

  constraint-error :
    t@GenericType(_, _) -> (t, $[Type is not defined: [<pp-mobl-type> t]])
    where not(<lookup-type> t) // no entity for this type

  constraint-error :
    Html(tag, _, _, closeTag) -> (closeTag, $[Wrong closing tag])
    where not(<eq> (tag, closeTag))

  constraint-error :
    t@Var(qid) -> (t, $[Variable not defined: [<pp-mobl-exp> t]])
    where not("elements" := qid)
    where not(type-of)

  constraint-error :
    VarDeclInferred(x, e) -> (x, $[Not able to infer type, please declare type explicitly, e.g. var [x] : SomeType = ...])
    where not(<type-of> Var(x))

  constraint-error :
    Call(qid, e*) -> (<id>, $[Wrong set of arguments. Expected arguments are: [<filter(?FArg(<id>, _)); separate-by(!", "); concat-strings> farg*]])
    where def := <lookup-function> qid
        ; (ExternalFunction(_, _, farg*, _) := def <+ ExternalSyncFunction(_, _, farg*, _) := def)
        ; not(<resolve-fargs> (e*, <topdown(try(strip-annos))> farg*))

  constraint-error :
    Call(qid, e*) -> <fargs-type-not-compatible> (farg*, e*)
    where def := <lookup-function> qid
        ; (ExternalFunction(_, _, farg*, _) := def <+ ExternalSyncFunction(_, _, farg*, _) := def)

  constraint-error :
    t@Call(qid, e*) -> (t, $[All arguments of an entity constructors need to be named, e.g. SomeEnt(name="...", age=27).])
    where ExternalEntity(_, _, _, _) := <lookup-type> SimpleType(qid)
       <+ ExternalType(_, _, _, _) := <lookup-type> SimpleType(qid)
    where not([] := <remove-all(?NamedExp(_, _))> e*)

  constraint-error :
    t@Call(qid, e*) -> (arg, $[No such property: [arg]])
    where ExternalEntity(_, _, _, prop*) := <lookup-type> SimpleType(qid)
       <+ ExternalType(_, _, _, prop*) := <lookup-type> SimpleType(qid)
    where args := <map(?NamedExp(<id>, _))> e*
        ; arg := <fetch-elem(\ a -> a where [] := <filter(?Property(_, a, _, _))> prop* \)> args

  constraint-error :
    t@Choice(_, _, _) -> (t, $[Could not determine type of: [<write-to-string> t]])
    where not(type-of)

  constraint-error :
    t@Brackets(_) -> (t, $[Could not determine type of: [<write-to-string> t]])
    where not(type-of)

  constraint-error :
    ControlCall(e, e*, elem*) -> (e, $[Expression does not return a control type])
    where t := <type-of> e
    where not(<is-control-type> t)

  constraint-error :
    ControlCall(e@Var(qid@QId(_, _)), e*, _) -> (e, $[Wrong set  of arguments. Expected arguments are: [<filter(?FArg(<id>, _)); separate-by(!", "); concat-strings> farg*]])
    where ExternalControl(_, _, farg*) := <lookup-control> qid
        ; not(<resolve-fargs> (e*, <topdown(try(strip-annos))> farg*))

  constraint-error :
    ControlCall(e@Var(qid@QId(_, _)), e*, _) -> <fargs-type-not-compatible> (farg*, e*)
    where ExternalControl(_, _, farg*) := <lookup-control> qid

  constraint-error :
    ControlCall(e@Var(qid@QId(_, _)), e*, _) -> (t, $[Invalid named arguments: [<separate-by(!", "); concat-strings> invalid-args].
                                                       Valid named arguments: [<separate-by(!", "); concat-strings> named-fargs]])
    where ExternalControl(_, _, farg*) := <lookup-control> qid
        ; named-fargs := <filter(?FArgOptional(<id>, _, _)); strip-annos> farg*
        ; invalid-args := <filter(\ NamedExp(x, _) -> x where not(<fetch(?x)> named-fargs) \)> e*
        ; [t|_] := invalid-args

  constraint-error :
    t@FieldAccess(e, x) -> (t, $[Property [x] not defined])
    where <type-of> e
    where not(type-of)

  constraint-error :
    t@Call(qid{}, arg*) -> (t, $[Function not defined])
    where <map(type-of)> arg*
    where not(type-of)


  constraint-error :
    MethodCall(e, x, e*) -> (x, $[Wrong set  of arguments. Expected arguments are: [<filter(?FArg(<id>, _)); separate-by(!", "); concat-strings> farg*]])
    where def := <lookup-method> (<type-of> e, x)
        ; (ExternalMethod(_, _, farg*, _) := def <+ ExternalSyncMethod(_, _, farg*, _) := def)
        ; not(<resolve-fargs> (e*, <topdown(try(strip-annos))> farg*))

  constraint-error :
    t@MethodCall(e, x, arg*) -> (t, $[No such method '[x]' defined])
    where <type-of> e
    where not(type-of)
        ; <type-of> e

  constraint-error :
    t@MethodCall(e, x, e*) -> <fargs-type-not-compatible> (farg*, e*)
    where ExternalMethod(_, _, farg*, _) := <lookup-function> (<type-of> e, x)

  constraint-error :
    Assignment(lhs, e) -> (lhs, $[No such variable '[lhs]' defined])
    where <is-string> lhs
    where not(<type-of> Var(lhs))

  constraint-error :
    Assignment(lv, e) -> (e, $[Cannot assign an expression of type [<pp-mobl-type> t1] to l-value of type [<pp-mobl-type> t2]])
    where t1 := <type-of> e
        ; t2 := <type-of-lvalue> lv
    where not(<type-compatible> (t2, t1))

  constraint-error :
    VarDecl(x, t, e) -> (e, $[Cannot assign an expression of type [<pp-mobl-type> t1] to variable of type [<pp-mobl-type> t]])
    where t1 := <type-of> e
    where not(<type-compatible> (t, t1))

  constraint-error :
    p@Path(part*) -> (p, $[File not found. Note that paths are relative to the project root.])
    where not(<separate-by(|"/"); concat-strings; resolve-file> part*)

  constraint-error :
    Import(qid) -> (qid, $[Module not found.])
    where not(<qid-to-path; <concat-strings> [<id>, ".mobl"]; resolve-file> qid)

  constraint-warning:
    Entity(_, qid, _, _) -> (x, $[Entity names must start with a capital])
    where
      if <is-string> qid then
        x := qid
      else
        QId(_, x) := qid
      end
      ; not(<explode-string; Hd; is-upper> x)


rules

 fargs-type-not-compatible :
    (farg*, e*) -> (e, $[Expression should be of type [<pp-mobl-type> t] instead of [<pp-mobl-type> <type-of> e].])
    where e2* := <resolve-fargs> (e*, <topdown(try(strip-annos))> farg*)
        ; t* := <map(?FArg(_, <id>) <+ ?FArgOptional(_, <id>, _))> farg*
        ; (e, t) := <zip; fetch-elem(\ (e, t) -> <id> where <not(type-compatible)> (t, <type-of> e) \)> (e2*, t*)


/*  constraint-note:
    Module(x @ "example", _) -> (x, $[This is just an example program in the "entities" language
                                      (this note is defined in trans/check.str) ])
*/
  constraint-note = fail
