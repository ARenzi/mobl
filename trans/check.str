module check

imports
  include/MoBL
  lookup
  type
  
rules
    
  constraint-error :
    t@SimpleType(_) -> (t, $[Type is not defined])
    where not(<lookup-type> t) // no entity for this type
        ; not(_{"TemplateType"} := t)

  constraint-error :
    t@GenericType(_, _) -> (t, $[Type is not defined])
    where not(<lookup-type> t) // no entity for this type
    
  constraint-error :
    Html(tag, _, _, closeTag) -> (closeTag, $[Wrong closing tag])
    where not(tag := closeTag)
    
  constraint-error :
    TemplateCall(qid, arg*, prop*, body) -> (qid, $[No such template defined with these arguments])
    where not("elements" := qid; [] := arg*)
    where not(<lookup-template> (qid, <map(type-of)> arg*))
    
  constraint-error :
    t@Var(qid) -> (t, $[Variable not defined])
    where not(type-of)

  constraint-error :
    t@Call(_, _) -> (t, $[Function not defined])
    where not(type-of)
  
  constraint-error = normalize; constraint-error
  
  normalize :
    TemplateCallNoArgs(name, prop*, body) -> TemplateCall(name, [], prop*, body)

  normalize :
    TemplateCallNoArgsNoBody(name, prop*) -> TemplateCall(name, [], prop*, [])

  normalize :
    TemplateCallNoArgsNoProperties(name, body) -> TemplateCall(name, [], [], body)

  normalize :
    TemplateCallNoArgsNoPropertiesNoBody(name) -> TemplateCall(name, [], [], [])

  normalize :
    TemplateCallNoBody(name, arg*, prop*) -> TemplateCall(name, arg*, prop*, [])

  normalize :
    TemplateCallNoProperties(name, arg*, body) -> TemplateCall(name, arg*, [], body)

  normalize :
    TemplateCallNoPropertiesNoBody(name, arg*) -> TemplateCall(name, arg*, [], [])

  normalize :
    EntityNoSuper(qid, prop*) -> Entity(qid, GenericType(QId("mobl", "Entity"), [SimpleType(qid)]), prop*)
  
  constraint-warning:
    Entity(qid, _, _) -> (x, $[Entity names must start with a capital])
    where
      if <is-string> qid then
        x := qid
      else
        QId(_, x) := qid
      end
      ; not(<explode-string; Hd; is-upper> x)
  
/*  constraint-note:
    Module(x @ "example", _) -> (x, $[This is just an example program in the "entities" language
                                      (this note is defined in trans/check.str) ])
*/
  constraint-note = fail
