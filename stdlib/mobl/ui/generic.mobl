module mobl::ui::generic

import mobl

load mobl/ui/generic.css
load mobl/ui/generic/search.png
/*
load mobl/ui/generic/css-beziers.js
load mobl/ui/generic/touchscroll.js
load mobl/ui/generic/touchscroll.css*/

resource mobl/ui/generic/arrow.png
resource mobl/ui/generic/contextmenu.png

control header(text : String, onclick : Callback = null) {
  <div class="header" onclick=onclick>
    <div class="headerContainer"><div databind=text class="headerText"/></div>
    elements()
  </div>
}

control button(text : String, onclick : Callback = null) {
  <span class="button" onclick=onclick databind=text/>
}

control sideButton(text : String, onclick : Callback = null) {
  <span class="sideButton" onclick=onclick databind=text/>
}

control backButton(text : String = "Back", onclick : Callback = { screen return; }) {
  <span class="backButton" onclick=onclick databind=text/>
}

control block() {
  <div>
  elements()
  </div>
}

control group() {
  <ul class="group">
    elements()
  </ul>
}

control image(url : String, onclick : Callback = null) {
  <img src=url onclick=onclick/>
}

control item(onclick : Callback = null, onswipe : Callback = null) {
  <li class="item" onclick=onclick>
    elements()
  </li>
}

control itemArrow(onclick : Callback = null, onswipe : Callback = null) {
  <li class="itemArrow" onclick=onclick>
    elements()
  </li>
}

control checkBox(b : Bool, label : String = "") {
  <input type="checkbox" databind=b onclick={}/>
  " "
  <span databind=label onclick={ b = b ? false : true; }/>
}

control textField(s : String, placeholder : String = null, onchange : Callback = null) {
  <input type="text" placeholder=placeholder databind=s onchange=onchange onblur={ scrollUp(); }/>
}

control numField(n : Num, placeholder : String = null, onchange : Callback = null) {
  <input type="text" placeholder=placeholder databind=n onchange=onchange />
}

@doc "A tabset, takes a list of tuples as argument, e.g. [(\"Tab 1\", \"icon url\", tab1), (\"Tab 2\", \"icon uri\", tab2)] where tab1 and tab2 are controls with no arguments"
control tabSet(tabs : [(String, String, Control)]) {
  var activeTabName : String = tabs.get(0)._1

  var s = ""

  <div class="tabbar">
    list((tabName, tabIcon, tabControl) in tabs) {
      <span onclick={ activeTabName = tabName; } class=activeTabName == tabName ? "tab activeTabButton" : "tab inActiveTabButton">
        label(tabName)
      </span>
    }
  </div>
  list((tabName, tabIcon, tabControl) in tabs) {
    <div class=activeTabName == tabName ? "activeTab" : "inActiveTab">
      tabControl()
    </div>
  }
}

control searchBox(s : String, placeholder : String = null, onsearch : Callback = null) {
  <div class="searchbox">
    <input type="text" placeholder=placeholder databind=s onchange=onsearch />
  </div>
}

// CONTEXT MENU

external control contextMenu()

<javascript>
mobl.ui.generic.contextMenu = function(elements, callback) {
  var root = $("<span>");
  var img = $("<img src='mobl/ui/generic/contextmenu.png' style='float: right;'/>");
  root.append(img);

  img.tap(function(event) {
    event.stopPropagation();
    event.preventDefault();
    var target = img.parent();
    img.hide();
    var item = $("<div class='contextMenu'>");
    item.css('right', "5px");
    item.css('top', target.position().top+6 + "px");
    elements(function(elements, callback) {
      var root5175 = $("<span>");
      callback(root5175); return;
    }, function(node) { item.append(node); });
    target.append(item);
    //item.hide().fadeIn();
    function removeMenu(evt) {
      console.log(evt.target);
      if($(evt.target).parents(".contextMenu").length === 0) {
        item.remove();
        img.show();
        $("body").unbind('touchstart click', removeMenu);
      }
    }
    $("body").bind('touchstart click', removeMenu);
  });

  callback(root);
};
</javascript>

// Higher level controls

control masterDetail(items : Collection<Dynamic>, masterItem : Control1<Dynamic>, detail : Control1<Dynamic>) {
  group {
    list(it in items) {
      item(onclick={ detailScreen(it, detail); }) {
        masterItem(it)
      }
    }
  }
}

screen detailScreen(it : Dynamic, detail : Control1<Dynamic>) {
  header("Detail") {
    backButton("Back", onclick={ screen return; })
  }
  detail(it)
}

@cond isIpad() && isLandscape()
control masterDetail(items : Collection<Dynamic>, masterItem : Control1<Dynamic>, detail : Control1<Dynamic>) {
  var current : Dynamic = items.one()
  <div width="100%">
    <div style="float:left; width:33%; position:relative; border-right: solid 1px #cccccc;">
      group {
        list(it in items) {
          (it == current ? itemArrow : item)({ current = it; }) {
            masterItem(it)
          }
        }
      }
    </div>
    <div style="float:left; width:66.5%; position:relative; margin-left: 0.5%;">
      detail(current)
    </div>
  </div>
}

// Floating box

external sync function setupFloatBox(top : Num = null, right : Num = null, bottom : Num = null, left : Num = null) : void

control floatBox(top : Num = null, right : Num = null, bottom : Num = null, left : Num = null) {
  <div id="floatBox" style="position: absolute;">
    elements()
  </div>
  script {
    setupFloatBox(top, right, bottom, left);
  }
}

<javascript>
mobl.ui.generic.setupFloatBox = function(top, right, bottom, left) {
  setTimeout(function() {
    var box = $("div#floatBox");
    if(top !== null) box.css("top", "" + top + "px");
    if(right !== null) box.css("right", "" + right + "px");
    if(bottom !== null) box.css("top", "" + (window.pageYOffset + window.innerHeight - box.outerHeight() - bottom) + "px");
    if(left !== null) box.css("left", "" + left + "px");
    function updateLocation() {
      if(top !== null) {
        box.css("top", "" + (window.pageYOffset + top) + "px");
      }
      if(bottom !== null) {
        box.css("top", "" + (window.pageYOffset + window.innerHeight - box.outerHeight() - bottom) + "px");
      }
    }
    $(window).bind('scroll', updateLocation);
    $(window).bind('resize', updateLocation);
  }, 200);
};
</javascript>

@doc "Renders a table, use row { } rows and cell { } for cells"
control table() {
  <table>elements()</table>
}

control row() {
  <tr>elements()</tr>
}

control cell(width : String = null) {
  <td width=width>elements()</td>
}

// SCROLLERS

external sync function setupScrollers() : void
external sync function scrollUp() : void

control scroller(height : Num = 200) {
  <div class="scroller">
    elements()
  </div>
  script {
    setupScrollers();
  }
}

<javascript>
setTimeout(function() {
  scrollTo(0, -1);
}, 250);

jQuery.fn.tap = function (callback) {
  //if(mobl.isIphone() || mobl.isAndroid() || mobl.isIpad()) {
    //new NoClickDelay(this[0], callback);
  //} else {
  this.click(callback);
  //}
};


mobl.ui.generic.scrollUp = function() {
  scrollTo(0, 0);
}

mobl.ui.generic.setupScrollers = function() {
  setTimeout(function() {
    var allScrollers = $("div.scroller");
    for(var i = 0; i < allScrollers.length; i++) {
      var scroller = allScrollers.eq(i);
      if(!scroller.data("scroller")) {
         scroller.data("scroller", new TouchScroll(scroller[0], {elastic: true}));
      }
    }
  }, 250);
};

setInterval(function() {
  var allScrollers = $("div.scroller");
  for(var i = 0; i < allScrollers.length; i++) {
    var scroller = allScrollers.eq(i).data("scroller");
    if(scroller) {
       scroller.setupScroller();
    }
  }
}, 1000);
</javascript>