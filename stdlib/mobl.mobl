module mobl

load "lib/iphone.css"

/**
 * Built-in types
 */
@doc "A value representing nothing"
external type void {}

@doc "String type"
external type String : Object {
  sync function substr(start : Num, length : Num) : String
}

@doc "Numeric type, represents both integers and floating point numbers"
external type Num : Object { }

external type Bool : Object { }

external type Dynamic : Object { }

external type List<T> {
  sync function get(n : Num) : T
  sync function add(item : T) : void
}

external type Array<T> {
  sync function get(n : Num) : T
  sync function push(item : T) : void
}

external type Tuple1<T1> {
  _1 : T1
}

external type Tuple2<T1, T2> {
  _1 : T1
  _2 : T2
}

external type Tuple3<T1, T2, T3> {
  _1 : T1
  _2 : T2
  _3 : T3
}

external type Tuple4<T1, T2, T3, T4> {
  _1 : T1
  _2 : T2
  _3 : T3
  _4 : T4
}

external type Control {}
external type Control1<T1> { }
external type Control2<T1, T2> { }
external type Control3<T1, T2, T3> { }
external type Control4<T1, T2, T3, T4> { }
external type Control5<T1, T2, T3, T4, T5> { }

external type Callback {}
external type Function<RT> { }
external type Function1<RT, T1> { }
external type Function2<RT, T1, T2> { }
external type Function3<RT, T1, T2, T3> { }
external type Function4<RT, T1, T2, T3, T4> { }
external type Function5<RT, T1, T2, T3, T4, T5> { }

external type Text : Object { }

external type DateTime {
  static sync function parse(s : String) : DateTime
  static sync function fromTimestamp(timestamp : Num) : DateTime

  sync function getFullYear() : Num
  sync function getMonth() : Num

  @doc "Day of the month"
  sync function getDate() : Num

  sync function toString() : String
  sync function toDateString() : String

  sync function getTime() : Num
}

external sync function now() : DateTime

external type Object {
  sync function toString() : String
}

@doc "A virtual queryable collection"
external type Collection<T> {
  //function get() : Array<T>
  @doc "Return one item in the collection, or null if the collection is empty"
  function one() : T

  @doc "Prefetch a reference property"
  sync function prefetch(property : String) : Collection<T>

  @doc "Filter the collection on a property based on an operator `op` (options: '=', '<', '>', '<=', '>=' or '!=') and a value"
  sync function filter(property : String, op : String, value : Object) : Collection<T>

  @doc "Order the collection based on a property in ascending (ascending = true) or descending (ascending = false) order"
  sync function order(property : String, ascending : Bool) : Collection<T>

  @doc "Deletes all the items in the collection"
  function destroyAll() : void

  @doc "Count the number of items in the collection"
  function count() : Num

  sync function limit(n : Num) : Collection<T>
  sync function offset(n : Num) : Collection<T>
  sync function add(item : T) : void
  sync function remove(item : T) : void
  sync function updated() : void
}

external type Entity<T> {
  @doc "A virtual collection containing all instances of this entity"
  static sync function all() : Collection<T>
  static sync function search(query : String) : Collection<T>
  static sync function searchPrefix(query : String) : Collection<T>
}

external sync function log(s : String) : void
external sync function alert(s : String) : void

external sync function add(e : Object) : void
external sync function remove(e : Object) : void
external function resetDatabase() : void
external sync function formatDate(d : DateTime) : String
external sync function openUrl(url : String) : void
external sync function range(from : Num, to : Num) : List<Num>
external sync function random(max : Num) : Num

@doc "Internal use only"
external sync function updateScrollers() : void
external sync function scrollTop() : void

control outputString(s : String) {
  <span databind=s></span>
}

control label(s : String, onclick : Callback = null) {
  <span databind=s onclick=onclick></span>
}

control outputNum(n : Num) {
  <span databind=n></span>
}

control outputDate(d : DateTime) {
  <span databind=formatDate(d)/>
}

control header(title : String, onclick : Callback = null) {
  <div class="header" onclick=onclick>
    <h1 databind=title></h1>
  </div>
}

screen promptString(question : String) : String {
  var answer : String = ""
  header(question)
  inputs {
    inputString(answer)
  }
  button("Ok", onclick={ screen return answer; })
}

control inputString(s : String, placeholder : String = null, onchange : Callback = null) {
  <li>
    <input type="text" placeholder=placeholder databind=s onchange=onchange />
  </li>
}

control textField(s : String, placeholder : String = null, onchange : Callback = null) {
  <input type="text" placeholder=placeholder databind=s onchange=onchange />
}

control searchBox(s : String, placeholder : String = null, onsearch : Callback = null) {
  <div class="searchbox">
    <input type="text" placeholder=placeholder databind=s onchange=onsearch />
  </div>
}

control inputText(s : String, placeholder : String = null, onchange : Callback = null) {
  <li>
    <textarea placeholder=placeholder databind=s onchange=onchange/>
  </li>
}

control inputSecret(s : String, placeholder : String = null, onchange : Callback = null) {
  <li>
    <input type="password" placeholder=placeholder databind=s onchange=onchange/>
  </li>
}

control inputNum(i : Num, placeholder : String = null, label : String = null, onchange : Callback = null) {
  cond(label != null) {
    <span databind=label class="inputLabel" />
  }
  <input type="text" placeholder=placeholder databind=i onchange=onchange class=label != null ? "labelled" : ""/>
}

control inputs() {
  <ul>
    elements()
  </ul>
}

control checkbox(b : Bool, label : String = "") {
  <span onclick={ b = b ? false : true; }>
    <img src=b ? "lib/img/checkbox-checked.png" : "lib/img/checkbox.png" class="checkbox" />
    <span databind=label/>
  </span>
}

control inputCheckbox(b : Bool, onchange : Callback = null, onclick : Callback = {}) {
  <input type="checkbox" databind=b onchange=onchange />
}

control outputCheckbox(b : Bool) {
  <input type="checkbox" databind=b disabled="disabled" />
}

control basicView(title : String, toolBar : Control = control{}) {
  header(title)
  <div id="scrollwrapper">
    <div id="content">
      elements()
    </div>
  </div>
  <div id="footer">
  toolBar()
  </div>
}

@doc "Injects given HTML directly into the screen"
external control html(html : String)

@doc "Renders a table, use row { } rows and cell { } for cells"
control table() {
  <table>elements()</table>
}

control row() {
  <tr>elements()</tr>
}

control cell(width : String = null) {
  <td width=width>elements()</td>
}

control group() {
  <ul>
    elements()
  </ul>
}

control item(onclick : Callback = null, onswipe : Callback = null) {
  <li onclick=onclick onswipe=onswipe>elements()</li>
}

control itemArrow(onclick : Callback = null) {
  <li onclick=onclick class="arrow">elements()</li>
}

control image(url : String, onclick : Callback = null) {
  <img src=url onclick=onclick/>
}

control button(text : String, onclick : Callback = null) {
  <a href="javascript:void(0)" class="redButton" databind=text onclick=onclick></a>
}

control altButton(text : String, onclick : Callback = null) {
  <a href="javascript:void(0)" class="whiteButton" databind=text onclick=onclick></a>
}

control sideButton(text : String, onclick : Callback = null) {
  <a href="javascript:void(0)" class="button" databind=text onclick=onclick></a>
}

control topRightButton(text : String, onclick : Callback = null) {
  <a href="javascript:void(0)" class="topRightButton" databind=text onclick=onclick></a>
}

control backButton(text : String, onclick : Callback = null) {
  <a href="javascript:void(0)" class="backButton" id="back-button" databind=text onclick=onclick></a>
}

control toolbarButton(type : String, onclick : Callback = null) {
  <img src="lib/toolbar/icon_" + type + ".png" width="30" height="30" class="toolbarButton" onclick=onclick/>
}

@doc "A tabset, takes a list of tuples as argument, e.g. [(\"Tab 1\", \"icon url\", tab1), (\"Tab 2\", \"icon uri\", tab2)] where tab1 and tab2 are controls with no arguments"
control tabset(tabs : List<Tuple3<String, String, Control>>) {
  var activeTabName : String = tabs.get(0)._1

  header(activeTabName, onclick={ scrollTop(); })
  list((tabName, tabIcon, tabControl) in tabs) {
    <div class=activeTabName == tabName ? "activeTab" : "inActiveTab">
      <div id="scrollwrapper">
        <div id="content">
          tabControl()
        </div>
      </div>
    </div>
  }

  <div id="tabbar">
    list((tabName, tabIcon, tabControl) in tabs) {
      <div onclick={ activeTabName = tabName; updateScrollers(); } class=activeTabName == tabName ? "activeTabButton" : "inActiveTabButton">
        <img src=tabIcon width="25" height="25"/><br/>
        outputString(tabName)
      </div>
    }
  </div>
}

@doc "A tabset, takes a list of tuples as argument, e.g. [(\"Tab 1\", \"icon url\", tab1), (\"Tab 2\", \"icon uri\", tab2)] where tab1 and tab2 are controls with no arguments"
control tabsetCustomHeaders(tabs : List<Tuple4<String, String, Control, Control>>) {
  var activeTabName : String = tabs.get(0)._1

  list((tabName, tabIcon, headerControl, tabControl) in tabs) {
    <div class=activeTabName == tabName ? "activeTab" : "inActiveTab">
      headerControl()
    </div>
  }
  list((tabName, tabIcon, headerControl, tabControl) in tabs) {
    <div class=activeTabName == tabName ? "activeTab" : "inActiveTab">
      <div id="scrollwrapper">
        <div id="content">
          tabControl()
        </div>
      </div>
    </div>
  }

  <div id="tabbar">
    list((tabName, tabIcon, headerControl, tabControl) in tabs) {
      <div onclick={ activeTabName = tabName; updateScrollers(); } class=activeTabName == tabName ? "activeTabButton" : "inActiveTabButton">
        <img src=tabIcon width="25" height="25"/><br/>
        outputString(tabName)
      </div>
    }
  </div>
}

<javascript>
mobl.alert = function(s, _, callback) {
    alert(s);
    if(callback) callback();
};
mobl.log = function(s, _, callback) {
    console.log(s);
    if(callback) callback();
};
mobl.add = function(e, _, callback) {
    persistence.add(e);
    var allEnt = persistence.define(e._type).all(); // NOTE: define() is a hack!
    allEnt.triggerEvent('add', allEnt, e);
    allEnt.triggerEvent('change', allEnt, e);
    if(callback) callback();
};

mobl.now = function() {
  return new Date();
};

mobl.remove = function(e, _, callback) {
    persistence.remove(e);
    var allEnt = persistence.define(e._type).all();
    allEnt.triggerEvent('remove', allEnt, e);
    allEnt.triggerEvent('change', allEnt, e);
    if(callback) callback();
};
mobl.resetDatabase = function(_, callback) {
    persistence.reset(null, callback);
};

mobl.updateScrollers = function() {
    mobl.delayedUpdateScrollers();
};

mobl.openUrl = function(url) {
  location = url;
};

mobl.random = function(max) {
  return Math.round(Math.random()*max);
}

mobl.scrollTop = function() {
  var scrollers = $("div#scrollwrapper div#content");
  for (var i = 0; i < scrollers.length; i++) {
    var scroller = scrollers.eq(i).data("scroller");
    scroller.scrollTo(0, 0);
  }
}

persistence.QueryCollection.prototype.updates = function() {
  this.triggerEvent('change', this);
};

// Date stuff

mobl.DateTime = {
  parse: function(s) {
    return new Date(Date.parse(s));
  },
  fromTimestamp: function(timestamp) {
    return new Date(timestamp);
  }
};

Date.prototype.toDateString = function() {
  return "" + (this.getMonth()+1) + "/" + this.getDate() + "/" + this.getFullYear();
};

mobl.formatDate = function(date) {
  var diff = (((new Date()).getTime() - date.getTime()) / 1000);
  var day_diff = Math.floor(diff / 86400);
  if ( isNaN(day_diff) || day_diff < 0 || day_diff >= 31 )
    return;

  return day_diff == 0 && (
      diff < 60 && "just now" ||
      diff < 120 && "1 minute ago" ||
      diff < 3600 && Math.floor( diff / 60 ) + " minutes ago" ||
      diff < 7200 && "1 hour ago" ||
      diff < 86400 && Math.floor( diff / 3600 ) + " hours ago") ||
      day_diff == 1 && "Yesterday" ||
      day_diff < 7 && day_diff + " days ago" ||
      day_diff < 31 && Math.ceil( day_diff / 7 ) + " weeks ago";
};

mobl.range = function(from, to) {
  var ar = [];
  for(var i = from; i < to; i++) {
    ar.push(i);
  }
  var l = new mobl.List();
  l.values = ar;
  return l;
};

mobl.html = function(html, elements, callback) {
  var root192 = $("<span>");
  var node180 = $("<span >");

  var ref108 = html;
  node180.html(html.get().toString());
  var ignore51 = false;
  ref108.addEventListener('change', function(_, ref, val) {
    if(ignore51) return;
    if(ref === ref108) {
      node180.html(val.toString());
    }
  });
  ref108.rebind();
  root192.append(node180);
  callback(root192); return;
};

persistence.entityDecoratorHooks.push(function(Entity) {
  Entity.searchPrefix = function(query) {
    return Entity.search(query, true);
  };
});

Array.prototype.list = function(tx, callback) {
  var valueCopy = [];
  for(var i = 0; i < this.length; i++) {
    valueCopy[i] = this[i];
  }
  callback(valueCopy);
};

Array.prototype.get = function(idx) {
  return this[idx];
};

</javascript>