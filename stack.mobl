application stack

import mobl

screen root() {
  init {
    var questions = StackOverflow.questions(answers=true, body=true);
    for(question in questions) {
      add(question);
      for(answer in question.answers) {
        add(answer);
      }
    }
  }
}

external type QuestionsResult {
  total     : Num
  page      : Num
  pagesize  : Num
  questions : Array<Question>
}

// Stack overflow types
external type RemoteQuestion {
  question_id     : Num
  title           : String
  owner           : RemoteUser
  body            : Text
  tags            : Array<String>
  answers         : Array<RemoteAnswer>
  answer_count    : Num
  favorite_count  : Num
  question_id     : Num
  creation_date   : Num
  up_vote_count   : Num
  down_vote_count : Num
  score           : Num
  view_count      : Num
}

external type RemoteAnswer {
  answer_id       : Num
  accepted        : Bool
  owner           : RemoteUser
  creation_date   : Num
  last_edit_date  : Num
  up_vote_count   : Num
  down_vote_count : Num
  score           : Num
  body            : Text
}

external type RemoteUser {
  user_id         : Num
  display_name    : String
  reputation      : Num
}

// Locally cached version

entity Question {
  questionId   : Num
  title        : String
  body         : Text
  answers      : Collection<Answer> (inverse: question)
  upVotes      : Num
  downVotes    : Num
  creationDate : DateTime
  owner        : User
}

entity Answer {
  question        : Question
  answerId        : Num
  accepted        : Bool
  owner           : User
  created         : DateTime
  lastEdit        : DateTime
  score           : Num
  body            : Text
}

entity User {
  userId     : Num
  name       : String
  reputation : Num
}

function mapQuestion(remote : RemoteQuestion) : Question {
  var q = Question.all().filter("questionId", "=", remote.question_id).one();
  if(q == null) {
    q = Question {
      questionId = remote.question_id,
      title = remote.title,
      body = remote.body,
      answers = mapAnswers(remote.answers),
      upVotes = remote.up_vote_count,
      downVotes = remote.down_vote_count,
      creationDate = DateTime.fromTimestamp(remote.creation_date),
      owner = mapUser(remote.owner)
    };
    add(q);
  } else {
    if(q.answers.count() != remote.answer_count) {
      q.answers.destroyAll();
      q.answers = mapAnswers(remote.answers);
    }
  }
  return q;
}

function mapAnswers(answers : Array<RemoteAnswer>) : Collection<Answer> {
  var resultList : Collection<Answer> = Collection<Answer>();
  for(answer in answers) {
    resultList.add(mapAnswer(answer));
  }
  return resultList;
}

function mapAnswer(answer : RemoteAnswer) : Answer {
  return Answer{
    answerId=answer.answer_id,
    accepted=answer.accepted,
    owner=mapUser(answer.owner),
    created=DateTime.fromTimestamp(answer.creation_date),
    lastEdit=DateTime.fromTimestamp(answer.last_edit_date),
    score=answer.score,
    body=answer.body
  };
}

function mapUser(user : RemoteUser) : User {
  log(user);
  var u = User.all().filter("userId", "=", user.user_id).one();
  if(u == null) {
    u = User {
      userId     = user.user_id,
      name       = user.display_name,
      reputation = user.reputation
    };
    add(u);
  }
  return u;
}

function mapQuestionsResult(res : QuestionsResult) : Collection<Question> {
  log("Here's the data: ");
  log(res);
  var resultList : Collection<Question> = Collection<Question>();
  for(question in res.questions) {
    resultList.add(mapQuestion(question));
  }
  return resultList;
}

service StackOverflow {
  root = "http://api.stackoverflow.com/0.8"
  resource questions(answers : Bool = false, body : Bool = false) : Collection<Question> {
    uri = "/questions"
    method = "GET"
    encoding = "json"
    mapper = mapQuestionsResult
  }
}
